/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * Interfaz.java
 *
 * Created on 22-jun-2010, 16:54:14
 */
package interfaces;

import puntoventa001.Ticket;
import puntoventa001.Proveedor;
import puntoventa001.Main;
import puntoventa001.IconoBarra;
import puntoventa001.Conexion;
import puntoventa001.Usuario;
import java.beans.PropertyVetoException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.URISyntaxException;
import java.security.CodeSource;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.imageio.ImageIO;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import puntoventa001.MyTableModel;

/**
 *
 * @author RAFAEL RAMIREZ CASTR
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    private ArrayList productos;
    private BufferedImage image = null;

    public Interfaz() {

        this.setTitle("STeVe Technogoly SA de CV");
        this.setUndecorated(true);
        initComponents();
        activar = true;
        inventario = false;
        // this.loadListaArticulosAndEventsList();
        this.iniciarVenta();

        /*
         procedimiento.borrarRepetidos();
         procedimiento.borrarMenores();
         */
//        jLabel17.setText("$" + procedimiento.totalInventario() + "0");
        /////////////////////////////////////////////////////////
        System.out.println("");
        /////////////////////////////////////////////////////////
        setSize(Toolkit.getDefaultToolkit().getScreenSize());
//        this.botonVentas.setEnabled(false);
        //      this.botonInventario.setEnabled(false);
        //    this.botonTotal.setEnabled(false);
        this.botonbarraInventario.setEnabled(true);

        this.botonbarraVender.setEnabled(true);
        //  this.botonEscritorio.setEnabled(false);
        this.botonbarraTotal1.setEnabled(true);
        //this.panel1.setSize(this.panelcapas.getSize());
        ////////////////////////////////////

        /////////////////////////////////////
        try {
            image = ImageIO.read(getClass().getResource("/puntoventa001/logo.png"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        setIconImage(image);
        this.panelcapas.add(comp);

        //Sistema de apartado
        botonbarraInventario4.setVisible(false);
        chkCot.setVisible(false);
        sa.setVisible(false);

        //Configuraciones
        botonbarraTotal5.setVisible(false);

    }

    private void loadListaArticulosAndEventsList() {
        productos = this.procedimiento.getArticuloC();

    }

    public Conexion getConexion() {
        return conexion;
    }

    public void setConexion(Conexion conexion) {
        this.conexion = conexion;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jWizardDialog1 = new org.freixas.jwizard.JWizardDialog();
        glossPainter1 = new org.jdesktop.swingx.painter.GlossPainter();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jMenuItem15 = new javax.swing.JMenuItem();
        jPopupMenu3 = new javax.swing.JPopupMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jLabel25 = new javax.swing.JLabel();
        jPopupMenu4 = new javax.swing.JPopupMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        panelTranslucido1 = new org.edisoncor.gui.panel.PanelTranslucido();
        panelcapas = new javax.swing.JLayeredPane();
        ventanaIventas = new javax.swing.JInternalFrame();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        panelVenta = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaVenta = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        jTextField7 = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        chkCot = new javax.swing.JCheckBox();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        clockDigital1 = new org.edisoncor.gui.varios.ClockDigital();
        jButton13 = new javax.swing.JButton();
        jCheckBox3 = new javax.swing.JCheckBox();
        sap = new javax.swing.JCheckBox();
        panelVenta1 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaVenta1 = new javax.swing.JTable();
        jPanel12 = new javax.swing.JPanel();
        jTextField10 = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jCheckBox2 = new javax.swing.JCheckBox();
        jButton6 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        clockDigital2 = new org.edisoncor.gui.varios.ClockDigital();
        jButton14 = new javax.swing.JButton();
        sa = new javax.swing.JCheckBox();
        jLabel16 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        botonbarraVender = new javax.swing.JMenuItem();
        botonbarraInventario3 = new javax.swing.JMenuItem();
        botonbarraInventario = new javax.swing.JMenuItem();
        botonbarraInventario2 = new javax.swing.JMenuItem();
        botonbarraInventario4 = new javax.swing.JMenuItem();
        botonbarraTotal4 = new javax.swing.JMenuItem();
        botonbarraTotal6 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        botonbarraTotal2 = new javax.swing.JMenuItem();
        botonbarraTotal1 = new javax.swing.JMenuItem();
        botonbarraTotal5 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        botonbarraTotal3 = new javax.swing.JMenuItem();
        user1 = new javax.swing.JMenu();
        jSeparator10 = new javax.swing.JPopupMenu.Separator();
        user = new javax.swing.JMenu();
        jSeparator9 = new javax.swing.JPopupMenu.Separator();

        jPopupMenu1.setFocusable(false);
        jPopupMenu1.setOpaque(false);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        jMenuItem1.setText("Modificar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenuItem1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenuItem1KeyPressed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        jMenuItem2.setText("Eliminar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenuItem2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenuItem2KeyPressed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        jMenuItem6.setText("Insertar Nuevo");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenuItem6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenuItem6KeyPressed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem6);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        jMenuItem5.setText("Buscar");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenuItem5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenuItem5KeyPressed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem5);

        jMenuItem14.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        jMenuItem14.setText("Generar codigo");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenuItem14.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenuItem14KeyPressed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem14);

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F10, 0));
        jMenuItem9.setText("Agergar Iventario");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem9);

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F11, 0));
        jMenuItem10.setText("Bajos en inventario");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem10);

        jMenuItem15.setText("Quitar");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jPopupMenu2.add(jMenuItem15);

        jPopupMenu3.setFocusable(false);
        jPopupMenu3.setOpaque(false);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setText("Agregar");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenuItem7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenuItem7KeyPressed(evt);
            }
        });
        jPopupMenu3.add(jMenuItem7);

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel25.setText("CANTIDAD TOTAL DE VENTAS REALIZADAS");

        jMenuItem8.setText("Detalles...");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jPopupMenu4.add(jMenuItem8);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        panelTranslucido1.setBackground(new java.awt.Color(255, 255, 255));
        panelTranslucido1.setColorPrimario(new java.awt.Color(255, 255, 255));
        panelTranslucido1.setGradiente(org.edisoncor.gui.panel.Panel.Gradiente.ESQUINA_2);

        panelcapas.setBackground(new java.awt.Color(240, 240, 240));
        panelcapas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        ventanaIventas.setIconifiable(true);
        ventanaIventas.setMaximizable(true);
        ventanaIventas.setResizable(true);
        ventanaIventas.setTitle("Ventas de Mostrador");
        ventanaIventas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ventanaIventas.setFocusTraversalPolicyProvider(true);
        ventanaIventas.setFrameIcon(new ImageIcon(this.getClass().getResource("/puntoventa001/logo2.png")));
        ventanaIventas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ventanaIventasKeyPressed(evt);
            }
        });

        jTabbedPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane2MouseClicked(evt);
            }
        });

        panelVenta.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        panelVenta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelVentaMouseClicked(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Totales", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        jLabel3.setText("Total:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 153, 102));
        jLabel2.setText("Productos en la venta actual");

        jTextField5.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        jTextField5.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jTextField6.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        jTextField6.setForeground(new java.awt.Color(204, 0, 0));
        jTextField6.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Productos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N

        tablaVenta.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        tablaVenta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nombre", "Cantidad", "Precio U", "Sub-total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaVenta.setComponentPopupMenu(jPopupMenu2);
        tablaVenta.setOpaque(false);
        tablaVenta.setRowHeight(28);
        tablaVenta.setRowSelectionAllowed(false);
        tablaVenta.setSelectionBackground(new java.awt.Color(255, 51, 51));
        tablaVenta.setSelectionForeground(new java.awt.Color(102, 255, 51));
        tablaVenta.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaVenta.setShowHorizontalLines(false);
        tablaVenta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tablaVentaFocusLost(evt);
            }
        });
        tablaVenta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tablaVentaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tablaVenta);
        if (tablaVenta.getColumnModel().getColumnCount() > 0) {
            tablaVenta.getColumnModel().getColumn(0).setResizable(false);
            tablaVenta.getColumnModel().getColumn(0).setPreferredWidth(5);
            tablaVenta.getColumnModel().getColumn(1).setResizable(false);
            tablaVenta.getColumnModel().getColumn(1).setPreferredWidth(25);
            tablaVenta.getColumnModel().getColumn(2).setResizable(false);
            tablaVenta.getColumnModel().getColumn(2).setPreferredWidth(2);
            tablaVenta.getColumnModel().getColumn(3).setResizable(false);
            tablaVenta.getColumnModel().getColumn(3).setPreferredWidth(5);
            tablaVenta.getColumnModel().getColumn(4).setResizable(false);
            tablaVenta.getColumnModel().getColumn(4).setPreferredWidth(5);
        }

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Inserción de codigos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N

        jTextField7.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField7.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextField7.setFocusAccelerator('j');
        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });
        jTextField7.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTextField7PropertyChange(evt);
            }
        });
        jTextField7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField7KeyPressed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puntoventa001/Dollar.png"))); // NOI18N
        jButton7.setText("FIN | Cobrar");
        jButton7.setToolTipText("(End)");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jButton7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton7KeyPressed(evt);
            }
        });

        chkCot.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chkCot.setText("S.A");
        chkCot.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                chkCotKeyPressed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaces/Varios.png"))); // NOI18N
        jButton3.setText("INS Varios");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaces/Search_24.png"))); // NOI18N
        jButton4.setText("F5 Buscar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaces/Shipping_24.png"))); // NOI18N
        jButton5.setText("F11 Mayoreo");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaces/Trash - copia.png"))); // NOI18N
        jButton9.setText("DEL Borrrar");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        clockDigital1.setForeground(new java.awt.Color(0, 102, 102));
        clockDigital1.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 22)); // NOI18N

        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Safe - copia.png"))); // NOI18N
        jButton13.setText("F9 Caja");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jCheckBox3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jCheckBox3.setText("Ticket");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });
        jCheckBox3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCheckBox3KeyPressed(evt);
            }
        });

        sap.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sap.setText("Cot");
        sap.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sapKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton13))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addComponent(jTextField7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(clockDigital1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(chkCot)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sap)
                        .addContainerGap())))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clockDigital1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton4)
                            .addComponent(jButton5)
                            .addComponent(jButton9))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addComponent(sap)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBox3)
                            .addComponent(chkCot)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton7))
                        .addContainerGap())))
        );

        javax.swing.GroupLayout panelVentaLayout = new javax.swing.GroupLayout(panelVenta);
        panelVenta.setLayout(panelVentaLayout);
        panelVentaLayout.setHorizontalGroup(
            panelVentaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVentaLayout.createSequentialGroup()
                .addGroup(panelVentaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelVentaLayout.createSequentialGroup()
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelVentaLayout.setVerticalGroup(
            panelVentaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVentaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelVentaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane2.addTab("Venta principal", panelVenta);

        panelVenta1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        panelVenta1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelVenta1MouseClicked(evt);
            }
        });

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Totales", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        jLabel22.setText("Total:");

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(0, 153, 102));
        jLabel23.setText("Productos en la venta actual");

        jTextField8.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        jTextField8.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jTextField9.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        jTextField9.setForeground(new java.awt.Color(204, 0, 0));
        jTextField9.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Productos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N

        tablaVenta1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tablaVenta1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nombre", "Cantidad", "Precio U", "Subtotal"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaVenta1.setRowHeight(24);
        tablaVenta1.setSelectionBackground(new java.awt.Color(255, 255, 255));
        tablaVenta1.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tablaVenta1.setShowHorizontalLines(false);
        tablaVenta1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tablaVenta1KeyPressed(evt);
            }
        });
        jScrollPane5.setViewportView(tablaVenta1);
        if (tablaVenta1.getColumnModel().getColumnCount() > 0) {
            tablaVenta1.getColumnModel().getColumn(0).setResizable(false);
            tablaVenta1.getColumnModel().getColumn(1).setResizable(false);
            tablaVenta1.getColumnModel().getColumn(2).setResizable(false);
            tablaVenta1.getColumnModel().getColumn(3).setResizable(false);
            tablaVenta1.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Insercion de codigos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N

        jTextField10.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField10.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextField10.setFocusAccelerator('j');
        jTextField10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField10ActionPerformed(evt);
            }
        });
        jTextField10.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTextField10PropertyChange(evt);
            }
        });
        jTextField10.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField10KeyPressed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puntoventa001/Dollar.png"))); // NOI18N
        jButton8.setText("FIN | Cobrar");
        jButton8.setToolTipText("(End)");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jButton8.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton8KeyPressed(evt);
            }
        });

        jCheckBox2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jCheckBox2.setSelected(true);
        jCheckBox2.setText("Ticket");
        jCheckBox2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCheckBox2KeyPressed(evt);
            }
        });

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaces/Varios.png"))); // NOI18N
        jButton6.setText("INS Varios");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaces/Search_24.png"))); // NOI18N
        jButton10.setText("F5 Buscar");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaces/Shipping_24.png"))); // NOI18N
        jButton11.setText("F11 Mayoreo");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaces/Trash - copia.png"))); // NOI18N
        jButton12.setText("DEL Borrrar");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        clockDigital2.setForeground(new java.awt.Color(0, 102, 102));
        clockDigital2.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 22)); // NOI18N

        jButton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Safe - copia.png"))); // NOI18N
        jButton14.setText("F9 Caja");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        sa.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sa.setText("S.A.");
        sa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clockDigital2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                        .addComponent(jTextField10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox2)
                            .addComponent(sa)))))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clockDigital2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton6)
                        .addComponent(jButton10)
                        .addComponent(jButton11)
                        .addComponent(jButton12)
                        .addComponent(jButton14)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, Short.MAX_VALUE)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton8))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                        .addComponent(sa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, Short.MAX_VALUE)
                        .addComponent(jCheckBox2))))
        );

        javax.swing.GroupLayout panelVenta1Layout = new javax.swing.GroupLayout(panelVenta1);
        panelVenta1.setLayout(panelVenta1Layout);
        panelVenta1Layout.setHorizontalGroup(
            panelVenta1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVenta1Layout.createSequentialGroup()
                .addGroup(panelVenta1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelVenta1Layout.createSequentialGroup()
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelVenta1Layout.setVerticalGroup(
            panelVenta1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVenta1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelVenta1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane2.addTab("Venta secundaria", panelVenta1);

        javax.swing.GroupLayout ventanaIventasLayout = new javax.swing.GroupLayout(ventanaIventas.getContentPane());
        ventanaIventas.getContentPane().setLayout(ventanaIventasLayout);
        ventanaIventasLayout.setHorizontalGroup(
            ventanaIventasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        ventanaIventasLayout.setVerticalGroup(
            ventanaIventasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
        );

        panelcapas.add(ventanaIventas);
        ventanaIventas.setBounds(0, 0, 820, 530);

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puntoventa001/logo.png"))); // NOI18N
        panelcapas.add(jLabel16);
        jLabel16.setBounds(-10, 70, 1020, 610);

        javax.swing.GroupLayout panelTranslucido1Layout = new javax.swing.GroupLayout(panelTranslucido1);
        panelTranslucido1.setLayout(panelTranslucido1Layout);
        panelTranslucido1Layout.setHorizontalGroup(
            panelTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelcapas, javax.swing.GroupLayout.DEFAULT_SIZE, 1032, Short.MAX_VALUE)
        );
        panelTranslucido1Layout.setVerticalGroup(
            panelTranslucido1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelcapas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 864, Short.MAX_VALUE)
        );

        jMenu1.setText("Inicio");
        jMenu1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puntoventa001/Minus - copia.PNG"))); // NOI18N
        jMenuItem4.setText("Minimizar");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puntoventa001/Banned-Sign - copia.PNG"))); // NOI18N
        jMenuItem3.setText("Salir");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Acciones");
        jMenu2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        botonbarraVender.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        botonbarraVender.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        botonbarraVender.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Bar-Code - copia.png"))); // NOI18N
        botonbarraVender.setText("Vender");
        botonbarraVender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonbarraVenderActionPerformed(evt);
            }
        });
        jMenu2.add(botonbarraVender);
        botonbarraVender.getAccessibleContext().setAccessibleDescription("");

        botonbarraInventario3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        botonbarraInventario3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        botonbarraInventario3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/User - copia.png"))); // NOI18N
        botonbarraInventario3.setText("Clientes");
        botonbarraInventario3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonbarraInventario3ActionPerformed(evt);
            }
        });
        jMenu2.add(botonbarraInventario3);

        botonbarraInventario.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        botonbarraInventario.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        botonbarraInventario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Shopping - copia.png"))); // NOI18N
        botonbarraInventario.setText("Productos");
        botonbarraInventario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonbarraInventarioActionPerformed(evt);
            }
        });
        jMenu2.add(botonbarraInventario);

        botonbarraInventario2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        botonbarraInventario2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        botonbarraInventario2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Invoice - copia.png"))); // NOI18N
        botonbarraInventario2.setText("Inventario");
        botonbarraInventario2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonbarraInventario2ActionPerformed(evt);
            }
        });
        jMenu2.add(botonbarraInventario2);

        botonbarraInventario4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        botonbarraInventario4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        botonbarraInventario4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Project-Plan - copia.png"))); // NOI18N
        botonbarraInventario4.setText("S. apartado");
        botonbarraInventario4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonbarraInventario4ActionPerformed(evt);
            }
        });
        jMenu2.add(botonbarraInventario4);

        botonbarraTotal4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        botonbarraTotal4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        botonbarraTotal4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaces/Book - copia.PNG"))); // NOI18N
        botonbarraTotal4.setText("Corte");
        botonbarraTotal4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonbarraTotal4ActionPerformed(evt);
            }
        });
        jMenu2.add(botonbarraTotal4);

        botonbarraTotal6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        botonbarraTotal6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        botonbarraTotal6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Project-Plan - copia.png"))); // NOI18N
        botonbarraTotal6.setText("Graficas");
        botonbarraTotal6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonbarraTotal6ActionPerformed(evt);
            }
        });
        jMenu2.add(botonbarraTotal6);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Configuración");
        jMenu4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jMenu4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu4ActionPerformed(evt);
            }
        });

        botonbarraTotal2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.ALT_MASK));
        botonbarraTotal2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        botonbarraTotal2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/User - copia.png"))); // NOI18N
        botonbarraTotal2.setText("Cajeros");
        botonbarraTotal2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonbarraTotal2ActionPerformed(evt);
            }
        });
        jMenu4.add(botonbarraTotal2);

        botonbarraTotal1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK));
        botonbarraTotal1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        botonbarraTotal1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puntoventa001/Contact-Info_32.png"))); // NOI18N
        botonbarraTotal1.setText("Configurar ticket");
        botonbarraTotal1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonbarraTotal1ActionPerformed(evt);
            }
        });
        jMenu4.add(botonbarraTotal1);

        botonbarraTotal5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        botonbarraTotal5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        botonbarraTotal5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/puntoventa001/config.png"))); // NOI18N
        botonbarraTotal5.setText("Avanzadas");
        botonbarraTotal5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonbarraTotal5ActionPerformed(evt);
            }
        });
        jMenu4.add(botonbarraTotal5);

        jMenuBar1.add(jMenu4);

        jMenu7.setText("Acerca de...");
        jMenu7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jMenu7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu7ActionPerformed(evt);
            }
        });

        botonbarraTotal3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        botonbarraTotal3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        botonbarraTotal3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Warning-Sign - copia.PNG"))); // NOI18N
        botonbarraTotal3.setText("Este software...");
        botonbarraTotal3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonbarraTotal3ActionPerformed(evt);
            }
        });
        jMenu7.add(botonbarraTotal3);

        jMenuBar1.add(jMenu7);

        user1.setForeground(new java.awt.Color(0, 153, 51));
        user1.setText("                                  ");
        user1.setEnabled(false);
        user1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        user1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        user1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        user1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                user1ActionPerformed(evt);
            }
        });
        user1.add(jSeparator10);

        jMenuBar1.add(user1);

        user.setForeground(new java.awt.Color(0, 153, 51));
        user.setText("Le atiende:");
        user.setEnabled(false);
        user.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        user.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        user.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        user.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userActionPerformed(evt);
            }
        });
        user.add(jSeparator9);

        jMenuBar1.add(user);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTranslucido1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTranslucido1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public static boolean activar = true;
private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
    // TODO add your handling code here:
    System.out.println("Presionaste F6");
    if (inventario) {
        buscandoInventario();
    } else {
        buscando(jTextField7.getText());
    }

}//GEN-LAST:event_jMenuItem5ActionPerformed

    private void buscando(String name) {

//        listaNombres.removeAll();
        ArrayList<String[]> prod = procedimiento.buscarProductos(name);
        Vector cads = new Vector();
        if (prod.size() >= 1) {
            for (String[] strings : prod) {
                cads.add(strings[2]);
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "El producto no existe !!!", "Error", 0);
        }
    }
    String name = "";

    private void buscandoInventario() {
        name = javax.swing.JOptionPane.showInputDialog(null, "Introduce el nombre del producto", "ISC Omar. .:. Buscar producto", javax.swing.JOptionPane.YES_OPTION);
//        this.actualizarTabla(tablaPoductos, this.procedimiento.buscarProductos(name));
    }

private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
    // TODO add your handling code here:


}//GEN-LAST:event_jMenuItem6ActionPerformed


private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
    // TODO add your handling code here:
    if (inventario) {

//        this.actualizarTabla(tablaPoductos, this.procedimiento.buscarProductos(name));
    } else {
        borrando();
    }

}//GEN-LAST:event_jMenuItem2ActionPerformed

    private void borrando() {
        int opt = javax.swing.JOptionPane.showConfirmDialog(null, "Esta seguro que desea eliminar el articulo seleccionado?", "ISC Omar. .:. Eliminar producto", javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);
        if (opt == javax.swing.JOptionPane.YES_OPTION) {
//            Object o = this.listaNombres.getSelectedValue();
/*
             * if (o == null) { javax.swing.JOptionPane.showMessageDialog(null,
             * "No hay ningun articulo seleccionado!!", "ISC Omar. .:. Eliminar
             * articulo", javax.swing.JOptionPane.INFORMATION_MESSAGE); } else {
             * boolean state = procedimiento.elminarProducto(o.toString());
             * String msj = ""; if (state) { msj = "El producto se ha eliminado
             * de la base de datos!!"; this.loadListaArticulosAndEventsList();
             * if (tablaPoductos.isShowing()) { ArrayList<String[]> listaT =
             * procedimiento.getAllProductos(); actualizarTabla(tablaPoductos,
             * listaT); } } else { msj = "No se ha podido dar de baja el
             * producto. \n Intentelo mas tarde o consulte con el administrador
             * del sistema"; } javax.swing.JOptionPane.showMessageDialog(null,
             * msj, "ISC Omar. .:. Eliminar articulo",
             * javax.swing.JOptionPane.INFORMATION_MESSAGE); } } }
             */
 /*
             * public void actualizarTabla(javax.swing.JTable t,
             * ArrayList<String[]> listaT) { this.LimpiarJTable(t);
             * ArrayList<String> row = new ArrayList<String>(); for (String[]
             * prod : listaT) { for (String string : prod) { row.add(string); }
             * ((DefaultTableModel) t.getModel()).addRow(row.toArray()); row =
             * new ArrayList<String>(); } }
             */
        }
    }
private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
    // TODO add your handling code here:
    if (inventario) {

    } else {
        modificando();
    }

}//GEN-LAST:event_jMenuItem1ActionPerformed

    private void modificando() {

        /*
         * Object o = listaNombres.getSelectedValue(); if (o == null) {
         * javax.swing.JOptionPane.showMessageDialog(null, "No ha seleccionado
         * ningun producto....", "ISC Omar. .>. Modificar producto",
         * javax.swing.JOptionPane.INFORMATION_MESSAGE); } else { String name =
         * o.toString(); String codBar = procedimiento.getCodigoBarras(name);
         * String details[] = procedimiento.getDetailsProducto(codBar);
         * this.nuevoCodigo.setText(codBar);
         *
         * if (!details[1].equals("null")) {
         * this.nuevoNombre.setText(details[1]); } else {
         * this.nuevoNombre.setText(""); }
         *
         * if (!details[2].equals("null")) {
         * this.nuevoPrecio.setText(details[2]); } else {
         * this.nuevoPrecio.setText(""); }
         *
         * if (!details[3].equals("null")) {
         * this.jTextArea1.setText(details[3]); } else {
         * this.jTextArea1.setText(""); }
         *
         * try { this.ventanaIventas.setMaximum(false);
         * this.ventanaIventas.setVisible(false);
         * this.venataInInvenatrio.setMaximum(true);
         * this.venataInInvenatrio.setVisible(true); } catch
         * (PropertyVetoException ex) {
         * Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null,
         * ex); } changeButtonToModif(); // System.out.println(details[0] +
         * details[1] + details[2] + details[3]); }
         * this.nuevoCodigo.setEditable(true);
         */
    }

    private boolean guardar = true;

    private void incluir(String codBar) {
        if (codBar == null) {
            javax.swing.JOptionPane.showMessageDialog(null, "No ha podido leer el valor de la caja de texto", "ISC Omar. .>. Inlcuir en venta", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } else {
            double cantidad = 0;
            try {
                String[] datos = procedimiento.getDetailsProducto2(codBar);
                if (datos[10].equals("granel") && !ins) {
                    ins = false;
                    g = new Ganel(this, true, datos);
                    g.setLocationRelativeTo(this);
                    g.setVisible(true);
                    cantidad = g.getCantidad();
                    if (cantidad > 0) {
                        this.incluirEnVenta(codBar, cantidad);
                    }
                } else {
                    this.incluirEnVenta(codBar, 1);
                }
            } catch (java.lang.NullPointerException e) {
                javax.swing.JOptionPane.showMessageDialog(null, "El articulo no existe", "ERROR", 0);
                jTextField7.setText("");
                jTextField7.requestFocus();
            }
            jTextField7.setText("");
        }
    }

    private void incluir1(String codBar) {
        if (codBar == null) {
            javax.swing.JOptionPane.showMessageDialog(null, "No ha podido leer el valor de la caja de texto", "ISC Omar. .>. Inlcuir en venta", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } else {
            double cantidad = 0;
            try {
                String[] datos = procedimiento.getDetailsProducto2(codBar);
                if (datos[10].equals("granel") && !ins) {
                    ins = false;
                    g = new Ganel(this, true, datos);
                    g.setLocationRelativeTo(this);
                    g.setVisible(true);
                    cantidad = g.getCantidad();
                    if (cantidad > 0) {
                        this.incluirEnVenta1(codBar, cantidad);
                    }
                } else {
                    this.incluirEnVenta1(codBar, 1);
                }
            } catch (java.lang.NullPointerException e) {
                javax.swing.JOptionPane.showMessageDialog(null, "El articulo no existe", "ERROR", 0);
                jTextField10.setText("");
                jTextField10.requestFocus();
            }
            jTextField10.setText("");
        }
    }

private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
    // TODO add your handling code here:
}//GEN-LAST:event_formKeyPressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if (vendiendo) {
            javax.swing.JOptionPane.showMessageDialog(this, "No puede salir hasta que termine la venta!!", "ISC Omar. Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        } else {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing
    boolean esta = false;

    public void Imprimir(String d, String h, String pago, String c) {
        System.out.println(d + "  " + h + "  " + pago + "  " + c);
        JasperReport jasperReport;
        JasperPrint jasperPrint;
        String[] tiket = procedimiento.getDetailsTiket();

        try {
            jasperReport = JasperCompileManager.compileReport("tiket.jrxml");
            Map parametro1 = new HashMap();
            parametro1.put("dia", d);
            parametro1.put("hora", h);
            jasperPrint = JasperFillManager.fillReport(jasperReport, parametro1, conexion.con);
            JasperPrintManager.printReport(jasperPrint, false);
        } catch (Exception ex) {
            ex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(null, ex.getMessage());
        }

    }
    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed

    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        DefaultTableModel mode = (DefaultTableModel) tablaVenta.getModel();
        mode.removeRow(tablaVenta.getSelectedRow());
        for (int i = 0; i < tablaVenta.getRowCount(); i++) {
            double c = Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
            double p = Double.parseDouble(tablaVenta.getValueAt(i, 3).toString());
            tablaVenta.setValueAt("" + c * p, i, 4);
        }

        double total = 0.0;
        double a = 0.0;
        for (int i = 0; i < tablaVenta.getRowCount(); i++) {
            total += Double.parseDouble(tablaVenta.getValueAt(i, 4).toString());
            a += Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
        }
        String tot = "" + total;//double total = t.getSumaColumnaAsDouble(4);
        BigDecimal ar = new BigDecimal(a + "");
        ar = ar.setScale(2, RoundingMode.HALF_UP);

        jLabel2.setText(ar + " Productos en la venta");
        BigDecimal btot = new BigDecimal(tot + "");
        btot = btot.setScale(2, RoundingMode.HALF_UP);
        this.jTextField5.setText("$ " + btot);
        articulos--;

    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void ventanaIventasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ventanaIventasKeyPressed
        // TODO add your handling code here:
        System.out.println(evt.isActionKey());
}//GEN-LAST:event_ventanaIventasKeyPressed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        cobrar();

}//GEN-LAST:event_jButton7ActionPerformed

    private void jTextField7KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField7KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            String cod = null;

            for (int j = 0; j < tablaVenta.getRowCount(); j++) {

                try {
                    cod = tablaVenta.getValueAt(j, 0).toString();
                } catch (java.lang.ArrayIndexOutOfBoundsException e) {
                    javax.swing.JOptionPane.showMessageDialog(null, "No has seleccionado ningun producto", "Error!!! ", 0);
                }
                String[] detalles = procedimiento.getDetailsProducto2(cod);
                boolean esta = false;
                for (String mayor : moyoreos) {
                    System.out.println("Esta : " + mayor);
                    if (mayor.equals(cod)) {
                        esta = true;
                    }
                }
                if (esta) {
                    tablaVenta.setValueAt(detalles[2], j, 3);
                    moyoreos.remove(cod);
                    String value = tablaVenta.getValueAt(j, 1).toString();
                    tablaVenta.setValueAt(value.substring(1, value.length()), j, 1);

                } else {
                    tablaVenta.setValueAt(detalles[9], j, 3);
                    tablaVenta.setValueAt("*" + tablaVenta.getValueAt(j, 1).toString(), j, 1);
                    moyoreos.add(cod);
                }
                double suma = 0;
                for (int i = 0; i < tablaVenta.getRowCount(); i++) {
                    double c = Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
                    double p = Double.parseDouble(tablaVenta.getValueAt(i, 3).toString());
                    tablaVenta.setValueAt("" + c * p, i, 4);
                    suma += (c * p);
                }
                double a = 0.0;
                for (int i = 0; i < tablaVenta.getRowCount(); i++) {
                    a += Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
                }
                BigDecimal ar = new BigDecimal(a + "");
                ar = ar.setScale(2, RoundingMode.HALF_UP);
                jLabel2.setText(ar + " Productos en la venta");
                BigDecimal btot = new BigDecimal(suma + "");
                btot = btot.setScale(2, RoundingMode.HALF_UP);
                this.jTextField5.setText("$ " + btot);

                tablaVenta.clearSelection();
                jTextField7.requestFocus();
                tablaVenta.setDefaultRenderer(Object.class, new MyTableModel());
            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_F9) {

            RegistroCaja rc = new RegistroCaja(this, true);
            rc.setVisible(true);
        }
        if (evt.getKeyCode() == KeyEvent.VK_F8) {
            RegistroCaja s = new RegistroCaja(this, true);
            s.setVisible(true);
            s.setLocationRelativeTo(this);
        }

        if (evt.getKeyCode() == KeyEvent.VK_END) {
            cobrar();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F7) {
            InicioCaja e = new InicioCaja(this, true);
            e.setVisible(true);
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            BuscarProductos bp = new BuscarProductos(this, true, true);
            bp.setVisible(true);
            incluirEnVenta(bp.getCodbar(), bp.getCantidad());
            jTextField7.requestFocus();

        }
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            tablaVenta.requestFocus();
            tablaVenta.setColumnSelectionInterval(tablaVenta.getRowCount() - 1, 2);
            tablaVenta.setRowSelectionInterval(tablaVenta.getRowCount() - 1, tablaVenta.getRowCount() - 1);
        }
        if (evt.getKeyCode() == KeyEvent.VK_INSERT) {
            VariosProductos vp = new VariosProductos(this, true);
            vp.setVisible(true);
            ins = true;
            incluirEnVenta(vp.getCodigo(), vp.getCantidad());
        }
}//GEN-LAST:event_jTextField7KeyPressed

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed

        incluir(jTextField7.getText());

    }//GEN-LAST:event_jTextField7ActionPerformed

    private void jMenuItem5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenuItem5KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F6) {
            System.out.println("Presionaste F6");
            if (inventario) {
                buscandoInventario();
            } else {
                buscando(jTextField7.getText());
            }
        }
    }//GEN-LAST:event_jMenuItem5KeyPressed

    private void jMenuItem1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenuItem1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            if (inventario) {

            } else {
//                modificando();
            }
        }
    }//GEN-LAST:event_jMenuItem1KeyPressed

    private void jMenuItem2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenuItem2KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            if (inventario) {

            } else {
                borrando();
            }
        }
    }//GEN-LAST:event_jMenuItem2KeyPressed

    private void jMenuItem6KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenuItem6KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F3) {

        }
    }//GEN-LAST:event_jMenuItem6KeyPressed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        try {
            double cant = Double.parseDouble(javax.swing.JOptionPane.showInputDialog("Cantidad de articulos"));
            /*
             * String codigo =
             * procedimiento.getCodigoBarras(listaNombres.getSelectedValue().toString());
             * this.incluirEnVenta(codigo, cant); jTextField7.requestFocus();
             */
        } catch (HeadlessException headlessException) {
        } catch (NumberFormatException numberFormatException) {
            javax.swing.JOptionPane.showMessageDialog(null, "Debes insertar un numero", "ISC Omar", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem7KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenuItem7KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                int cant = Integer.parseInt(javax.swing.JOptionPane.showInputDialog("Cantidad de articulos"));
                /*
                 * String codigo =
                 * procedimiento.getCodigoBarras(listaNombres.getSelectedValue().toString());
                 * this.incluirEnVenta(codigo, cant);
                 */ jTextField7.requestFocus();
            } catch (HeadlessException headlessException) {
            } catch (NumberFormatException numberFormatException) {
                javax.swing.JOptionPane.showMessageDialog(null, "Debes insertar un numero", "ISC Omar", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem7KeyPressed

    private void jMenuItem14KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenuItem14KeyPressed
    }//GEN-LAST:event_jMenuItem14KeyPressed

    private void jButton7KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton7KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            cobrar();

        }
    }//GEN-LAST:event_jButton7KeyPressed

    private void tablaVentaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tablaVentaFocusLost
    }//GEN-LAST:event_tablaVentaFocusLost

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
}//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed

    }//GEN-LAST:event_jMenuItem9ActionPerformed
    public static int tipoUsuario = 0;
    String valorCelda = "";

    private void tablaVentaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaVentaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F9) {

            RegistroCaja rc = new RegistroCaja(this, true);
            rc.setVisible(true);
        }
        if (evt.getKeyCode() == KeyEvent.VK_F8) {
            RegistroCaja s = new RegistroCaja(this, true);
            s.setVisible(true);
            s.setLocationRelativeTo(this);
        }
        if (evt.getKeyCode() == KeyEvent.VK_F7) {
            InicioCaja e = new InicioCaja(this, true);
            e.setVisible(true);
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            BuscarProductos bp = new BuscarProductos(this, true, true);
            bp.setVisible(true);
            incluirEnVenta(bp.getCodbar(), bp.getCantidad());

        }
        if (evt.getKeyCode() == KeyEvent.VK_F11) {
            String cod = null;

            try {
                cod = tablaVenta.getValueAt(tablaVenta.getSelectedRow(), 0).toString();
            } catch (java.lang.ArrayIndexOutOfBoundsException e) {
                javax.swing.JOptionPane.showMessageDialog(null, "No has seleccionado ningun producto", "Error!!! ", 0);
            }
            String[] detalles = procedimiento.getDetailsProducto2(cod);
            boolean esta = false;
            for (String mayor : moyoreos) {
                System.out.println("Esta : " + mayor);
                if (mayor.equals(cod)) {
                    esta = true;
                }
            }
            if (esta) {
                tablaVenta.setValueAt(detalles[2], tablaVenta.getSelectedRow(), 3);
                moyoreos.remove(cod);
                String value = tablaVenta.getValueAt(tablaVenta.getSelectedRow(), 1).toString();
                tablaVenta.setValueAt(value.substring(1, value.length()), tablaVenta.getSelectedRow(), 1);

            } else {
                tablaVenta.setValueAt(detalles[9], tablaVenta.getSelectedRow(), 3);
                tablaVenta.setValueAt("*" + tablaVenta.getValueAt(tablaVenta.getSelectedRow(), 1).toString(), tablaVenta.getSelectedRow(), 1);
                moyoreos.add(cod);
            }
            double suma = 0;
            for (int i = 0; i < tablaVenta.getRowCount(); i++) {
                double c = Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
                double p = Double.parseDouble(tablaVenta.getValueAt(i, 3).toString());
                tablaVenta.setValueAt("" + c * p, i, 4);
                suma += (c * p);
            }
            double a = 0.0;
            for (int i = 0; i < tablaVenta.getRowCount(); i++) {
                a += Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
            }
            BigDecimal ar = new BigDecimal(a + "");
            ar = ar.setScale(2, RoundingMode.HALF_UP);
            jLabel2.setText(ar + " Productos en la venta");
            BigDecimal btot = new BigDecimal(suma + "");
            btot = btot.setScale(2, RoundingMode.HALF_UP);
            this.jTextField5.setText("$ " + btot);

            tablaVenta.clearSelection();
            jTextField7.requestFocus();
            tablaVenta.setDefaultRenderer(Object.class, new MyTableModel());
        }
        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            String cod = null;

            for (int j = 0; j < tablaVenta.getRowCount(); j++) {

                try {
                    cod = tablaVenta.getValueAt(j, 0).toString();
                } catch (java.lang.ArrayIndexOutOfBoundsException e) {
                    javax.swing.JOptionPane.showMessageDialog(null, "No has seleccionado ningun producto", "Error!!! ", 0);
                }
                String[] detalles = procedimiento.getDetailsProducto2(cod);
                boolean esta = false;
                for (String mayor : moyoreos) {
                    System.out.println("Esta : " + mayor);
                    if (mayor.equals(cod)) {
                        esta = true;
                    }
                }
                if (esta) {
                    tablaVenta.setValueAt(detalles[2], j, 3);
                    moyoreos.remove(cod);
                    String value = tablaVenta.getValueAt(j, 1).toString();
                    tablaVenta.setValueAt(value.substring(1, value.length()), j, 1);

                } else {
                    tablaVenta.setValueAt(detalles[9], j, 3);
                    tablaVenta.setValueAt("*" + tablaVenta.getValueAt(j, 1).toString(), j, 1);
                    moyoreos.add(cod);
                }
                double suma = 0;
                for (int i = 0; i < tablaVenta.getRowCount(); i++) {
                    double c = Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
                    double p = Double.parseDouble(tablaVenta.getValueAt(i, 3).toString());
                    tablaVenta.setValueAt("" + c * p, i, 4);
                    suma += (c * p);
                }
                double a = 0.0;
                for (int i = 0; i < tablaVenta.getRowCount(); i++) {
                    a += Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
                }
                BigDecimal ar = new BigDecimal(a + "");
                ar = ar.setScale(2, RoundingMode.HALF_UP);
                jLabel2.setText(ar + " Productos en la venta");
                BigDecimal btot = new BigDecimal(suma + "");
                btot = btot.setScale(2, RoundingMode.HALF_UP);
                this.jTextField5.setText("$ " + btot);

                tablaVenta.clearSelection();
                jTextField7.requestFocus();
                tablaVenta.setDefaultRenderer(Object.class, new MyTableModel());
            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            double suma = 0;
            for (int i = 0; i < tablaVenta.getRowCount(); i++) {
                double c = Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
                double p = Double.parseDouble(tablaVenta.getValueAt(i, 3).toString());
                BigDecimal ar = new BigDecimal(c * p + "");
                ar = ar.setScale(2, RoundingMode.HALF_UP);
                tablaVenta.setValueAt("" + ar, i, 4);
                suma += (Double.parseDouble("" + ar));
            }
            double a = 0.0;
            for (int i = 0; i < tablaVenta.getRowCount(); i++) {
                a += Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
            }
            BigDecimal ar = new BigDecimal(a + "");
            ar = ar.setScale(2, RoundingMode.HALF_UP);
            jLabel2.setText(ar + " Productos en la venta");

            BigDecimal btot = new BigDecimal(suma + "");
            btot = btot.setScale(2, RoundingMode.HALF_UP);
            this.jTextField5.setText("$ " + btot);

            tablaVenta.clearSelection();
            jTextField7.requestFocus();
        }

        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            if (tablaVenta.getSelectedRow() == tablaVenta.getRowCount() - 1) {
                double suma = 0;
                for (int i = 0; i < tablaVenta.getRowCount(); i++) {
                    double c = Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
                    double p = Double.parseDouble(tablaVenta.getValueAt(i, 3).toString());
                    tablaVenta.setValueAt("" + c * p, i, 4);
                    suma += (c * p);
                }
                double a = 0.0;
                for (int i = 0; i < tablaVenta.getRowCount(); i++) {
                    a += Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
                }
                BigDecimal ar = new BigDecimal(a + "");
                ar = ar.setScale(2, RoundingMode.HALF_UP);
                jLabel2.setText(ar + " Productos en la venta");

                BigDecimal btot = new BigDecimal(suma + "");
                btot = btot.setScale(2, RoundingMode.HALF_UP);
                this.jTextField5.setText("$ " + btot);

                tablaVenta.clearSelection();
                jTextField7.requestFocus();

            }

        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            tablaVenta.clearSelection();
            jTextField7.requestFocus();
        }

        if (evt.getKeyCode() == KeyEvent.VK_END) {
            cobrar();
        }

        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            DefaultTableModel mode = (DefaultTableModel) tablaVenta.getModel();
            mode.removeRow(tablaVenta.getSelectedRow());
            String cod = tablaVenta.getValueAt(tablaVenta.getSelectedRow(), 0).toString();
            moyoreos.remove(cod);
            for (int i = 0; i < tablaVenta.getRowCount(); i++) {
                double c = Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
                double p = Double.parseDouble(tablaVenta.getValueAt(i, 3).toString());
                tablaVenta.setValueAt("" + c * p, i, 4);
            }

            double total = 0.0;
            for (int i = 0; i < tablaVenta.getRowCount(); i++) {
                total += Double.parseDouble(tablaVenta.getValueAt(i, 4).toString());

            }
            String tot = "" + total;//double total = t.getSumaColumnaAsDouble(4);
            double a = 0.0;
            for (int i = 0; i < tablaVenta.getRowCount(); i++) {

                a += Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
            }
            BigDecimal ar = new BigDecimal(a + "");
            ar = ar.setScale(2, RoundingMode.HALF_UP);
            jLabel2.setText(ar + " Productos en la venta");

            BigDecimal btot = new BigDecimal(tot + "");
            btot = btot.setScale(2, RoundingMode.HALF_UP);
            this.jTextField5.setText("$ " + btot);

            articulos--;

        }
    }//GEN-LAST:event_tablaVentaKeyPressed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
//        this.actualizarTabla(tablaPoductos, this.procedimiento.bajos());
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void botonbarraTotal2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonbarraTotal2ActionPerformed
        if (tipoUsuario == 0) {
            Usuarios u = new Usuarios(this, true);
            u.setVisible(true);
        } else {
            MiCuenta u = new MiCuenta(this, true);
            u.setVisible(true);
        }
    }//GEN-LAST:event_botonbarraTotal2ActionPerformed

    @SuppressWarnings({"empty-statement", "empty-statement"})
    private void botonbarraTotal1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonbarraTotal1ActionPerformed
        // TODO add your handling code here:
        if (tipoUsuario == 0) {
            new ConfigurarTicket(this, true).setVisible(true);;
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "No tienes permisos para esto", "ERROR", 0);
        }
    }//GEN-LAST:event_botonbarraTotal1ActionPerformed

    private void jMenu4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu4ActionPerformed

    private void botonbarraInventarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonbarraInventarioActionPerformed
        // TODO add your handling code here:
        Productos p = new Productos(this, true);
        p.setVisible(true);

    }//GEN-LAST:event_botonbarraInventarioActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
        cancelarVenta();
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void botonbarraVenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonbarraVenderActionPerformed
        // TODO add your handling code here:
        activar = true;
        inventario = false;
        // this.loadListaArticulosAndEventsList();
        this.iniciarVenta();
    }//GEN-LAST:event_botonbarraVenderActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        Main.interfaz.login.setVisible(false);
        setVisible(false);
        new IconoBarra();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void botonbarraInventario3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonbarraInventario3ActionPerformed
        Clientes c = new Clientes(this, true);
        c.setVisible(true);
    }//GEN-LAST:event_botonbarraInventario3ActionPerformed

    private void botonbarraInventario2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonbarraInventario2ActionPerformed
        Inventario i = new Inventario(this, true);
        i.setVisible(true);
    }//GEN-LAST:event_botonbarraInventario2ActionPerformed
    boolean ins = false;
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        VariosProductos vp = new VariosProductos(this, true);
        vp.setVisible(true);
        ins = true;
        incluirEnVenta(vp.getCodigo(), vp.getCantidad());

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        DefaultTableModel mode = (DefaultTableModel) tablaVenta.getModel();
        mode.removeRow(tablaVenta.getSelectedRow());
        String cod = tablaVenta.getValueAt(tablaVenta.getSelectedRow(), 0).toString();
        moyoreos.remove(cod);

        for (int i = 0; i < tablaVenta.getRowCount(); i++) {
            double c = Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
            double p = Double.parseDouble(tablaVenta.getValueAt(i, 3).toString());
            tablaVenta.setValueAt("" + c * p, i, 4);
        }

        double total = 0.0;
        for (int i = 0; i < tablaVenta.getRowCount(); i++) {
            total += Double.parseDouble(tablaVenta.getValueAt(i, 4).toString());

        }
        String tot = "" + total;//double total = t.getSumaColumnaAsDouble(4);
        double a = 0.0;
        for (int i = 0; i < tablaVenta.getRowCount(); i++) {

            a += Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
        }

        BigDecimal ar = new BigDecimal(a + "");
        ar = ar.setScale(2, RoundingMode.HALF_UP);
        jLabel2.setText(ar + " Productos en la venta");
        BigDecimal btot = new BigDecimal(tot + "");
        btot = btot.setScale(2, RoundingMode.HALF_UP);
        this.jTextField5.setText("$ " + btot);

        articulos--;
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        BuscarProductos bp = new BuscarProductos(this, true, true);
        bp.setVisible(true);
        incluirEnVenta(bp.getCodbar(), bp.getCantidad());
        // jTextField7.requestFocus();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField7PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTextField7PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField7PropertyChange

    private void botonbarraTotal3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonbarraTotal3ActionPerformed
        //new BackUpSample().CrearBackup("localhost", "3306", "root", "", "ventasbasic", "E:/copia.sql");
        Acerca a = new Acerca(this, false);
        a.setVisible(true);
        procedimiento.borrarRepetidos();
    }//GEN-LAST:event_botonbarraTotal3ActionPerformed
    public boolean backupDB(String dbName, String dbUserName, String dbPassword, String path) {
        String executeCmd = "C:/xampp/mysql/bin/mysqldump -u " + dbUserName + " -p" + dbPassword + " --add-drop-database -B " + dbName + " -r " + path;
        Process runtimeProcess;
        try {
            runtimeProcess = Runtime.getRuntime().exec(executeCmd);
            int processComplete = runtimeProcess.waitFor();
            System.out.println("" + processComplete);
            if (processComplete == 0) {
                System.out.println("Backup created successfully");
                return true;
            } else {
                System.out.println("Could not create the backup");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return false;
    }
    private void jMenu7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu7ActionPerformed
    ArrayList<String> moyoreos = new ArrayList<String>();
    ArrayList<String> moyoreos1 = new ArrayList<String>();
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String cod = null;
        try {
            cod = tablaVenta.getValueAt(tablaVenta.getSelectedRow(), 0).toString();
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            javax.swing.JOptionPane.showMessageDialog(null, "No has seleccionado ningun producto", "Error!!! ", 0);
        }
        String[] detalles = procedimiento.getDetailsProducto2(cod);
        boolean esta = false;
        for (String mayor : moyoreos) {
            System.out.println("Esta : " + mayor);
            if (mayor.equals(cod)) {
                esta = true;
            }
        }

        if (esta) {
            tablaVenta.setValueAt(detalles[2], tablaVenta.getSelectedRow(), 3);
            moyoreos.remove(cod);
            String value = tablaVenta.getValueAt(tablaVenta.getSelectedRow(), 1).toString();
            tablaVenta.setValueAt(value.substring(1, value.length()), tablaVenta.getSelectedRow(), 1);

        } else {
            tablaVenta.setValueAt(detalles[9], tablaVenta.getSelectedRow(), 3);
            tablaVenta.setValueAt("*" + tablaVenta.getValueAt(tablaVenta.getSelectedRow(), 1).toString(), tablaVenta.getSelectedRow(), 1);
            moyoreos.add(cod);
        }

        double suma = 0;
        for (int i = 0; i < tablaVenta.getRowCount(); i++) {
            double c = Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
            double p = Double.parseDouble(tablaVenta.getValueAt(i, 3).toString());
            tablaVenta.setValueAt("" + c * p, i, 4);
            suma += (c * p);
        }
        double a = 0.0;
        for (int i = 0; i < tablaVenta.getRowCount(); i++) {
            a += Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
        }
        BigDecimal ar = new BigDecimal(a + "");
        ar = ar.setScale(2, RoundingMode.HALF_UP);
        jLabel2.setText(ar + " Productos en la venta");
        BigDecimal btot = new BigDecimal(suma + "");
        btot = btot.setScale(2, RoundingMode.HALF_UP);
        this.jTextField5.setText("$ " + btot);
        tablaVenta.clearSelection();
        jTextField7.requestFocus();
        tablaVenta.setDefaultRenderer(Object.class, new MyTableModel());

    }//GEN-LAST:event_jButton5ActionPerformed

    private void userActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userActionPerformed

    private void user1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_user1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_user1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        salir();

    }//GEN-LAST:event_jMenuItem3ActionPerformed
    public void salir() {
        Component[] comp = panelcapas.getComponents();
        for (int i = 0; i < comp.length; i++) {
            comp[i].setVisible(false);
        }
        Salir s = new Salir(this, true);
    }
    private void chkCotKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chkCotKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            cobrar();
        }
    }//GEN-LAST:event_chkCotKeyPressed

    private void botonbarraTotal4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonbarraTotal4ActionPerformed
        Corte u = new Corte(this, true);
        u.setVisible(true);
    }//GEN-LAST:event_botonbarraTotal4ActionPerformed

    private void jTextField10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField10ActionPerformed
        incluir1(jTextField10.getText());
    }//GEN-LAST:event_jTextField10ActionPerformed

    private void jTextField10PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTextField10PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField10PropertyChange

    private void jTextField10KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField10KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F9) {

            RegistroCaja rc = new RegistroCaja(this, true);
            rc.setVisible(true);
        }
        if (evt.getKeyCode() == KeyEvent.VK_F8) {
            RegistroCaja s = new RegistroCaja(this, true);
            s.setVisible(true);
            s.setLocationRelativeTo(this);
        }

        if (evt.getKeyCode() == KeyEvent.VK_END) {
            cobrar1();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F7) {
            InicioCaja e = new InicioCaja(this, true);
            e.setVisible(true);
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            BuscarProductos bp = new BuscarProductos(this, true, true);
            bp.setVisible(true);
            incluirEnVenta1(bp.getCodbar(), bp.getCantidad());
            jTextField10.requestFocus();

        }
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            tablaVenta1.requestFocus();
            tablaVenta1.setColumnSelectionInterval(tablaVenta1.getRowCount() - 1, 2);
            tablaVenta1.setRowSelectionInterval(tablaVenta1.getRowCount() - 1, tablaVenta1.getRowCount() - 1);
        }
        if (evt.getKeyCode() == KeyEvent.VK_INSERT) {
            VariosProductos vp = new VariosProductos(this, true);
            vp.setVisible(true);
            ins = true;
            incluirEnVenta1(vp.getCodigo(), vp.getCantidad());
        }

    }//GEN-LAST:event_jTextField10KeyPressed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        cobrar1();
        jTextField10.requestFocus();

    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton8KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton8KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8KeyPressed

    private void jCheckBox2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCheckBox2KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            cobrar1();
        }
    }//GEN-LAST:event_jCheckBox2KeyPressed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        VariosProductos vp = new VariosProductos(this, true);
        vp.setVisible(true);
        ins = true;
        incluirEnVenta1(vp.getCodigo(), vp.getCantidad());
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed

        BuscarProductos bp = new BuscarProductos(this, true, true);
        bp.setVisible(true);
        incluirEnVenta1(bp.getCodbar(), bp.getCantidad());

    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        String cod = null;
        try {
            cod = tablaVenta1.getValueAt(tablaVenta1.getSelectedRow(), 0).toString();
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            javax.swing.JOptionPane.showMessageDialog(null, "No has seleccionado ningun producto", "Error!!! ", 0);
        }
        String[] detalles = procedimiento.getDetailsProducto2(cod);
        boolean esta = false;
        for (String mayor : moyoreos1) {
            System.out.println("Esta : " + mayor);
            if (mayor.equals(cod)) {
                esta = true;
            }
        }

        if (esta) {
            tablaVenta1.setValueAt(detalles[2], tablaVenta1.getSelectedRow(), 3);
            moyoreos1.remove(cod);
            String value = tablaVenta1.getValueAt(tablaVenta1.getSelectedRow(), 1).toString();
            tablaVenta1.setValueAt(value.substring(1, value.length()), tablaVenta1.getSelectedRow(), 1);

        } else {
            tablaVenta1.setValueAt(detalles[9], tablaVenta1.getSelectedRow(), 3);
            tablaVenta1.setValueAt("*" + tablaVenta1.getValueAt(tablaVenta1.getSelectedRow(), 1).toString(), tablaVenta1.getSelectedRow(), 1);
            moyoreos1.add(cod);
        }

        double suma = 0;
        for (int i = 0; i < tablaVenta1.getRowCount(); i++) {
            double c = Double.parseDouble(tablaVenta1.getValueAt(i, 2).toString());
            double p = Double.parseDouble(tablaVenta1.getValueAt(i, 3).toString());
            tablaVenta1.setValueAt("" + c * p, i, 4);
            suma += (c * p);
        }
        double a = 0.0;
        for (int i = 0; i < tablaVenta1.getRowCount(); i++) {
            a += Double.parseDouble(tablaVenta1.getValueAt(i, 2).toString());
        }
        BigDecimal ar = new BigDecimal(a + "");
        ar = ar.setScale(2, RoundingMode.HALF_UP);
        jLabel23.setText(ar + " Productos en la venta");
        BigDecimal btot = new BigDecimal(suma + "");
        btot = btot.setScale(2, RoundingMode.HALF_UP);
        this.jTextField8.setText("$ " + btot);
        tablaVenta1.clearSelection();
        jTextField10.requestFocus();
        tablaVenta1.setDefaultRenderer(Object.class, new MyTableModel());

    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        DefaultTableModel mode = (DefaultTableModel) tablaVenta1.getModel();
        mode.removeRow(tablaVenta1.getSelectedRow());
        String cod = tablaVenta1.getValueAt(tablaVenta1.getSelectedRow(), 0).toString();
        moyoreos1.remove(cod);

        for (int i = 0; i < tablaVenta1.getRowCount(); i++) {
            double c = Double.parseDouble(tablaVenta1.getValueAt(i, 2).toString());
            double p = Double.parseDouble(tablaVenta1.getValueAt(i, 3).toString());
            tablaVenta1.setValueAt("" + c * p, i, 4);
        }

        double total = 0.0;
        for (int i = 0; i < tablaVenta1.getRowCount(); i++) {
            total += Double.parseDouble(tablaVenta1.getValueAt(i, 4).toString());

        }
        String tot = "" + total;//double total = t.getSumaColumnaAsDouble(4);
        double a = 0.0;
        for (int i = 0; i < tablaVenta1.getRowCount(); i++) {

            a += Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
        }

        BigDecimal ar = new BigDecimal(a + "");
        ar = ar.setScale(2, RoundingMode.HALF_UP);
        jLabel23.setText(ar + " Productos en la venta");
        BigDecimal btot = new BigDecimal(tot + "");
        btot = btot.setScale(2, RoundingMode.HALF_UP);
        this.jTextField8.setText("$ " + btot);

        articulos1--;
    }//GEN-LAST:event_jButton12ActionPerformed

    private void tablaVenta1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaVenta1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F9) {

            RegistroCaja rc = new RegistroCaja(this, true);
            rc.setVisible(true);
        }
        if (evt.getKeyCode() == KeyEvent.VK_F8) {
            RegistroCaja s = new RegistroCaja(this, true);
            s.setVisible(true);
            s.setLocationRelativeTo(this);
        }
        if (evt.getKeyCode() == KeyEvent.VK_F7) {
            InicioCaja e = new InicioCaja(this, true);
            e.setVisible(true);
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            BuscarProductos bp = new BuscarProductos(this, true, true);
            bp.setVisible(true);
            incluirEnVenta1(bp.getCodbar(), bp.getCantidad());

        }
        if (evt.getKeyCode() == KeyEvent.VK_F11) {
            String cod = null;
            try {
                cod = tablaVenta1.getValueAt(tablaVenta1.getSelectedRow(), 0).toString();
            } catch (java.lang.ArrayIndexOutOfBoundsException e) {
                javax.swing.JOptionPane.showMessageDialog(null, "No has seleccionado ningun producto", "Error!!! ", 0);
            }
            String[] detalles = procedimiento.getDetailsProducto2(cod);
            boolean esta = false;
            for (String mayor : moyoreos1) {
                if (mayor.equals(cod)) {
                    esta = true;
                }
            }

            if (esta) {
                tablaVenta1.setValueAt(detalles[2], tablaVenta1.getSelectedRow(), 3);
                moyoreos1.remove(cod);
                String value = tablaVenta1.getValueAt(tablaVenta1.getSelectedRow(), 1).toString();
                tablaVenta1.setValueAt(value.substring(1, value.length()), tablaVenta1.getSelectedRow(), 1);

            } else {
                tablaVenta1.setValueAt(detalles[9], tablaVenta1.getSelectedRow(), 3);
                tablaVenta1.setValueAt("*" + tablaVenta1.getValueAt(tablaVenta1.getSelectedRow(), 1).toString(), tablaVenta1.getSelectedRow(), 1);
                moyoreos1.add(cod);
            }

            double suma = 0;
            for (int i = 0; i < tablaVenta1.getRowCount(); i++) {
                double c = Double.parseDouble(tablaVenta1.getValueAt(i, 2).toString());
                double p = Double.parseDouble(tablaVenta1.getValueAt(i, 3).toString());
                tablaVenta1.setValueAt("" + c * p, i, 4);
                suma += (c * p);
            }
            double a = 0.0;
            for (int i = 0; i < tablaVenta1.getRowCount(); i++) {
                a += Double.parseDouble(tablaVenta1.getValueAt(i, 2).toString());
            }
            BigDecimal ar = new BigDecimal(a + "");
            ar = ar.setScale(2, RoundingMode.HALF_UP);
            jLabel23.setText(ar + " Productos en la venta");
            BigDecimal btot = new BigDecimal(suma + "");
            btot = btot.setScale(2, RoundingMode.HALF_UP);
            this.jTextField8.setText("$ " + btot);
            tablaVenta1.clearSelection();
            jTextField10.requestFocus();
            tablaVenta1.setDefaultRenderer(Object.class, new MyTableModel());

        }

        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            String cod = null;

            for (int j = 0; j < tablaVenta1.getRowCount(); j++) {

                try {
                    cod = tablaVenta1.getValueAt(j, 0).toString();
                } catch (java.lang.ArrayIndexOutOfBoundsException e) {
                    javax.swing.JOptionPane.showMessageDialog(null, "No has seleccionado ningun producto", "Error!!! ", 0);
                }
                String[] detalles = procedimiento.getDetailsProducto2(cod);
                boolean esta = false;
                for (String mayor : moyoreos) {
                    if (mayor.equals(cod)) {
                        esta = true;
                    }
                }
                if (esta) {
                    tablaVenta.setValueAt(detalles[2], j, 3);
                    moyoreos.remove(cod);
                    String value = tablaVenta.getValueAt(j, 1).toString();
                    tablaVenta.setValueAt(value.substring(1, value.length()), j, 1);

                } else {
                    tablaVenta.setValueAt(detalles[9], j, 3);
                    tablaVenta.setValueAt("*" + tablaVenta.getValueAt(j, 1).toString(), j, 1);
                    moyoreos.add(cod);
                }
                double suma = 0;
                for (int i = 0; i < tablaVenta.getRowCount(); i++) {
                    double c = Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
                    double p = Double.parseDouble(tablaVenta.getValueAt(i, 3).toString());
                    tablaVenta.setValueAt("" + c * p, i, 4);
                    suma += (c * p);
                }
                double a = 0.0;
                for (int i = 0; i < tablaVenta.getRowCount(); i++) {
                    a += Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
                }
                BigDecimal ar = new BigDecimal(a + "");
                ar = ar.setScale(2, RoundingMode.HALF_UP);
                jLabel2.setText(ar + " Productos en la venta");
                BigDecimal btot = new BigDecimal(suma + "");
                btot = btot.setScale(2, RoundingMode.HALF_UP);
                this.jTextField5.setText("$ " + btot);

                tablaVenta.clearSelection();
                jTextField7.requestFocus();
                tablaVenta.setDefaultRenderer(Object.class, new MyTableModel());
            }
        }

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            double suma = 0;
            for (int i = 0; i < tablaVenta1.getRowCount(); i++) {
                double c = Double.parseDouble(tablaVenta1.getValueAt(i, 2).toString());
                double p = Double.parseDouble(tablaVenta1.getValueAt(i, 3).toString());
                BigDecimal ar = new BigDecimal(c * p + "");
                ar = ar.setScale(2, RoundingMode.HALF_UP);
                tablaVenta.setValueAt("" + ar, i, 4);
                suma += (Double.parseDouble("" + ar));
            }
            double a = 0.0;
            for (int i = 0; i < tablaVenta1.getRowCount(); i++) {
                a += Double.parseDouble(tablaVenta1.getValueAt(i, 2).toString());
            }
            BigDecimal ar = new BigDecimal(a + "");
            ar = ar.setScale(2, RoundingMode.HALF_UP);
            jLabel23.setText(ar + " Productos en la venta");

            BigDecimal btot = new BigDecimal(suma + "");
            btot = btot.setScale(2, RoundingMode.HALF_UP);
            this.jTextField8.setText("$ " + btot);
            tablaVenta1.clearSelection();
            jTextField10.requestFocus();
        }

        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            if (tablaVenta1.getSelectedRow() == tablaVenta1.getRowCount() - 1) {
                double suma = 0;
                for (int i = 0; i < tablaVenta1.getRowCount(); i++) {
                    double c = Double.parseDouble(tablaVenta1.getValueAt(i, 2).toString());
                    double p = Double.parseDouble(tablaVenta1.getValueAt(i, 3).toString());
                    tablaVenta1.setValueAt("" + c * p, i, 4);
                    suma += (c * p);
                }
                double a = 0.0;
                for (int i = 0; i < tablaVenta1.getRowCount(); i++) {
                    a += Double.parseDouble(tablaVenta1.getValueAt(i, 2).toString());
                }
                BigDecimal ar = new BigDecimal(a + "");
                ar = ar.setScale(2, RoundingMode.HALF_UP);
                jLabel23.setText(ar + " Productos en la venta");

                BigDecimal btot = new BigDecimal(suma + "");
                btot = btot.setScale(2, RoundingMode.HALF_UP);
                this.jTextField8.setText("$ " + btot);
                tablaVenta1.clearSelection();
                jTextField10.requestFocus();

            }

        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            tablaVenta1.clearSelection();
            jTextField10.requestFocus();
        }

        if (evt.getKeyCode() == KeyEvent.VK_END) {
            cobrar();
        }

        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            DefaultTableModel mode = (DefaultTableModel) tablaVenta1.getModel();
            mode.removeRow(tablaVenta1.getSelectedRow());
            String cod = tablaVenta1.getValueAt(tablaVenta1.getSelectedRow(), 0).toString();
            moyoreos1.remove(cod);
            for (int i = 0; i < tablaVenta1.getRowCount(); i++) {
                double c = Double.parseDouble(tablaVenta1.getValueAt(i, 2).toString());
                double p = Double.parseDouble(tablaVenta1.getValueAt(i, 3).toString());
                tablaVenta1.setValueAt("" + c * p, i, 4);
            }
            double total = 0.0;
            for (int i = 0; i < tablaVenta1.getRowCount(); i++) {
                total += Double.parseDouble(tablaVenta1.getValueAt(i, 4).toString());

            }
            String tot = "" + total;//double total = t.getSumaColumnaAsDouble(4);
            double a = 0.0;
            for (int i = 0; i < tablaVenta1.getRowCount(); i++) {

                a += Double.parseDouble(tablaVenta1.getValueAt(i, 2).toString());
            }
            BigDecimal ar = new BigDecimal(a + "");
            ar = ar.setScale(2, RoundingMode.HALF_UP);
            jLabel23.setText(ar + " Productos en la venta");
            BigDecimal btot = new BigDecimal(tot + "");
            btot = btot.setScale(2, RoundingMode.HALF_UP);
            this.jTextField8.setText("$ " + btot);
            articulos1--;
        }

    }//GEN-LAST:event_tablaVenta1KeyPressed

    private void jTabbedPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane2MouseClicked
        if (jTabbedPane2.getSelectedIndex() == 0) {
            jTextField7.requestFocus();
        } else {
            jTextField10.requestFocus();
        }
    }//GEN-LAST:event_jTabbedPane2MouseClicked

    private void panelVenta1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelVenta1MouseClicked
        jTextField10.requestFocus();
    }//GEN-LAST:event_panelVenta1MouseClicked

    private void panelVentaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelVentaMouseClicked
        jTextField7.requestFocus();
    }//GEN-LAST:event_panelVentaMouseClicked

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        RegistroCaja rc = new RegistroCaja(this, true);
        rc.setVisible(true);

    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        RegistroCaja rc = new RegistroCaja(this, true);
        rc.setVisible(true);

    }//GEN-LAST:event_jButton14ActionPerformed

    private void botonbarraInventario4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonbarraInventario4ActionPerformed
        Apartado a = new Apartado(this, true);
        a.setLocationRelativeTo(this);
        a.setVisible(true);


    }//GEN-LAST:event_botonbarraInventario4ActionPerformed

    private void jCheckBox3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCheckBox3KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox3KeyPressed

    private void saKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_saKeyPressed

    private void botonbarraTotal5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonbarraTotal5ActionPerformed


    }//GEN-LAST:event_botonbarraTotal5ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void botonbarraTotal6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonbarraTotal6ActionPerformed
        Grafica g = new Grafica(this, true);
        g.setVisible(true);

    }//GEN-LAST:event_botonbarraTotal6ActionPerformed

    private void sapKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sapKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_sapKeyPressed

    private void guardarNuevo() {
    }

    private void modificar() {
        /* Proveedor id = (Proveedor) jComboBox1.getSelectedItem();
         if (procedimiento.modifArticulo(nuevoCodigo.getText(),
         nuevoNombre.getText(),
         nuevoPrecio.getText(),
         this.jTextArea1.getText(),
         nuevoPrecioC.getText(),
         nuevoMinimo.getText(), id.getId(), nuevaCantidad.getText())) {
         javax.swing.JOptionPane.showMessageDialog(null, "Se han actualizado los campos satisfactoriamente", "ISC Omar", javax.swing.JOptionPane.INFORMATION_MESSAGE);
         nuevoCodigo.setText("");
         nuevoNombre.setText("");
         nuevoPrecio.setText("");
         nuevoMinimo.setText("");
         nuevaCantidad.setText("");
         nuevoPrecioC.setText("");
         jTextArea1.setText("");
         changeButtonToSave();
         } else {
         javax.swing.JOptionPane.showMessageDialog(null, "No se ha podido actualizar los campos con los datos proporcionados", "ISC Omar", javax.swing.JOptionPane.ERROR_MESSAGE);
         }*/
    }

    private void modificarInventario() {
        /*
         Proveedor id = null;
         try {
         id = (Proveedor) jComboBox1.getSelectedItem();
         } catch (java.lang.ClassCastException e) {
         javax.swing.JOptionPane.showMessageDialog(null, "Debes elegir un departamento", "ISC Omar", javax.swing.JOptionPane.ERROR_MESSAGE);
         }

         if (procedimiento.modifArticulo(nuevoCodigo.getText(),
         nuevoNombre.getText(),
         nuevoPrecio.getText(),
         this.jTextArea1.getText(),
         this.nuevoPrecioC.getText(),
         this.nuevoMinimo.getText(), id.getId(), nuevaCantidad.getText())) {
         javax.swing.JOptionPane.showMessageDialog(null, "Se han actualizado los campos satisfactoriamente", "ISC Omar", javax.swing.JOptionPane.INFORMATION_MESSAGE);
         nuevoCodigo.setText("");
         nuevoNombre.setText("");
         nuevoPrecio.setText("");
         nuevoPrecioC.setText("");
         nuevoMinimo.setText("");
         nuevaCantidad.setText("");
         jTextArea1.setText("");
         nuevoCodigo.setEnabled(true);
         jComboBox1.setSelectedIndex(0);
         ArrayList<String[]> listaT = procedimiento.getAllProductos();
         //            actualizarTabla(tablaPoductos, listaT);
         changeButtonToSave();
         nuevoCodigo.requestFocus();
         } else {
         javax.swing.JOptionPane.showMessageDialog(null, "No se ha podido actualizar los campos con los datos proporcionados", "ISC Omar", javax.swing.JOptionPane.ERROR_MESSAGE);
         }*/
    }
    Ganel g = null;

    @SuppressWarnings("static-access")
    private void incluirEnVenta(String codBar, double cantidad) {
        String datos[] = procedimiento.getDetailsProducto2(codBar);
        if (datos == null) {
            buscando(jTextField7.getText());
        } else {
            String nombre = datos[1];
            String precio = datos[2];
            System.out.println(datos[10]);
            System.out.println("Esta:  " + estaEnListaVenta(codBar));
            if (!estaEnListaVenta(codBar)) {

                double subtotal = Double.parseDouble(precio) * cantidad;
                BigDecimal big2 = new BigDecimal(subtotal + "");
                big2 = big2.setScale(2, RoundingMode.HALF_UP);
                ((DefaultTableModel) this.tablaVenta.getModel()).addRow(new Object[]{codBar, nombre, "" + cantidad, precio, "" + big2});
                double total = 0.0;
                for (int i = 0; i < tablaVenta.getRowCount(); i++) {
                    total += Double.parseDouble(tablaVenta.getValueAt(i, 4).toString());
                }
                String tot = "" + total;
                double a = 0.0;
                for (int i = 0; i < tablaVenta.getRowCount(); i++) {

                    a += Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
                }
                BigDecimal ar = new BigDecimal(a + "");
                ar = ar.setScale(2, RoundingMode.HALF_UP);
                jLabel2.setText(ar + " Productos en la venta");
                BigDecimal btot = new BigDecimal(tot + "");
                btot = btot.setScale(2, RoundingMode.HALF_UP);
                this.jTextField5.setText("$ " + btot);

                articulos++;
            } else {
                int indice = this.indiceQueesIgual(codBar);
                double c = cantidad + Double.parseDouble(tablaVenta.getValueAt(indice, 2).toString());
                BigDecimal big2 = new BigDecimal(c + "");
                big2 = big2.setScale(2, RoundingMode.HALF_UP);
                tablaVenta.setValueAt(big2 + "", indice, 2);
                BigDecimal big3 = new BigDecimal(Double.parseDouble(big2 + "") * Double.parseDouble(tablaVenta.getValueAt(indice, 3).toString()) + "");
                big3 = big3.setScale(2, RoundingMode.HALF_UP);
                tablaVenta.setValueAt(big3, indice, 4);
                double total = 0.0;
                for (int i = 0; i < tablaVenta.getRowCount(); i++) {
                    total += Double.parseDouble(tablaVenta.getValueAt(i, 4).toString());
                }
                String tot = "" + total;
                double a = 0.0;
                for (int i = 0; i < tablaVenta.getRowCount(); i++) {
                    a += Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
                }
                BigDecimal ar = new BigDecimal(a + "");
                ar = ar.setScale(2, RoundingMode.HALF_UP);
                jLabel2.setText(ar + " Productos en la venta");

                BigDecimal btot = new BigDecimal(tot + "");
                btot = btot.setScale(2, RoundingMode.HALF_UP);
                this.jTextField5.setText("$ " + btot);

            }
            jTextField7.requestFocus();
        }
    }

    @SuppressWarnings("static-access")
    private void incluirEnVenta1(String codBar, double cantidad) {
        String datos[] = procedimiento.getDetailsProducto2(codBar);
        if (datos == null) {
            buscando(jTextField10.getText());
        } else {
            String nombre = datos[1];
            String precio = datos[2];
            System.out.println(datos[10]);
            System.out.println("Esta:  " + estaEnListaVenta(codBar));
            if (!estaEnListaVenta1(codBar)) {

                double subtotal = Double.parseDouble(precio) * cantidad;
                BigDecimal big2 = new BigDecimal(subtotal + "");
                big2 = big2.setScale(2, RoundingMode.HALF_UP);
                ((DefaultTableModel) this.tablaVenta1.getModel()).addRow(new Object[]{codBar, nombre, "" + cantidad, precio, "" + big2});
                double total = 0.0;
                for (int i = 0; i < tablaVenta1.getRowCount(); i++) {
                    total += Double.parseDouble(tablaVenta1.getValueAt(i, 4).toString());
                }
                String tot = "" + total;
                double a = 0.0;
                for (int i = 0; i < tablaVenta1.getRowCount(); i++) {

                    a += Double.parseDouble(tablaVenta1.getValueAt(i, 2).toString());
                }
                BigDecimal ar = new BigDecimal(a + "");
                ar = ar.setScale(2, RoundingMode.HALF_UP);
                jLabel23.setText(ar + " Productos en la venta");
                BigDecimal btot = new BigDecimal(tot + "");
                btot = btot.setScale(2, RoundingMode.HALF_UP);
                this.jTextField8.setText("$ " + btot);
                articulos1++;
            } else {
                int indice = this.indiceQueesIgual1(codBar);
                double c = cantidad + Double.parseDouble(tablaVenta1.getValueAt(indice, 2).toString());
                BigDecimal big2 = new BigDecimal(c + "");
                big2 = big2.setScale(2, RoundingMode.HALF_UP);
                tablaVenta1.setValueAt(big2 + "", indice, 2);
                BigDecimal big3 = new BigDecimal(Double.parseDouble(big2 + "") * Double.parseDouble(tablaVenta1.getValueAt(indice, 3).toString()) + "");
                big3 = big3.setScale(2, RoundingMode.HALF_UP);
                tablaVenta1.setValueAt(big3, indice, 4);
                double total = 0.0;
                for (int i = 0; i < tablaVenta1.getRowCount(); i++) {
                    total += Double.parseDouble(tablaVenta1.getValueAt(i, 4).toString());
                }
                String tot = "" + total;
                double a = 0.0;
                for (int i = 0; i < tablaVenta1.getRowCount(); i++) {
                    a += Double.parseDouble(tablaVenta1.getValueAt(i, 2).toString());
                }
                BigDecimal ar = new BigDecimal(a + "");
                ar = ar.setScale(2, RoundingMode.HALF_UP);
                jLabel23.setText(ar + " Productos en la venta");

                BigDecimal btot = new BigDecimal(tot + "");
                btot = btot.setScale(2, RoundingMode.HALF_UP);
                this.jTextField8.setText("$ " + btot);
            }
            jTextField10.requestFocus();
        }
    }

    private int indiceQueesIgual(String cod) {
        int indice = 0;
        for (int i = 0; i < tablaVenta.getRowCount(); i++) {
            if (tablaVenta.getValueAt(i, 0).toString().equalsIgnoreCase(cod)) {
                break;
            }
            indice++;
        }
        return indice;
    }

    private int indiceQueesIgual1(String cod) {
        int indice = 0;
        for (int i = 0; i < tablaVenta1.getRowCount(); i++) {
            if (tablaVenta1.getValueAt(i, 0).toString().equalsIgnoreCase(cod)) {
                break;
            }
            indice++;
        }
        return indice;
    }

    private boolean estaEnListaVenta(String cod) {
        boolean resp = false;

        for (int i = 0; i < tablaVenta.getRowCount(); i++) {
            System.out.println(tablaVenta.getValueAt(i, 0).toString() + " == " + (cod));
            if (tablaVenta.getValueAt(i, 0).toString().equalsIgnoreCase(cod)) {
                resp = true;
                break;
            }
        }
        return resp;
    }

    private boolean estaEnListaVenta1(String cod) {
        boolean resp = false;

        for (int i = 0; i < tablaVenta1.getRowCount(); i++) {
            System.out.println(tablaVenta1.getValueAt(i, 0).toString() + " == " + (cod));
            if (tablaVenta1.getValueAt(i, 0).toString().equalsIgnoreCase(cod)) {
                resp = true;
                break;
            }
        }
        return resp;
    }

    private String eliminarPunto(String str) {
        String st = "";
        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) != '.') {
                st += "" + str.charAt(i);
            }
        }
        return st;
    }

    private String eliminarComa(String str) {
        String st = "";
        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) != ',') {
                st += "" + str.charAt(i);
            }
        }
        return st;
    }

    private int findNext(String cad) {
        for (int i = 0; i < productos.size(); i++) {
            if (productos.get(i).toString().contains(cad)) {
                return i;
            }
        }
        return -1;
    }
    private static boolean vendiendo = false;
    public static boolean inventario = false;

    public static void iniciarVenta() {
        vendiendo = true;
        jMenuItem7.setEnabled(true);
        jTextField7.setText("");
        jTextField7.setEnabled(true);
        jButton7.setEnabled(true);

        jLabel2.setText("");
        jTextField5.setText("");
        jTextField6.setText("");

        //      this.jTextField6.setText("");
        //    this.jMenuItem3.setEnabled(true);
        jMenuItem4.setEnabled(true);
        botonbarraInventario.setEnabled(true);

        botonbarraVender.setEnabled(true);
        jMenuItem1.setEnabled(false);
        jMenuItem2.setEnabled(false);
        jMenuItem5.setEnabled(true);
        jMenuItem6.setEnabled(false);
//        botonbarraVender1.setEnabled(false);
        //  botonbarraInventario1.setEnabled(true);
        comp.setVisible(false);
        ventanaIventas.setVisible(true);

        try {
            ventanaIventas.setMaximum(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
        jTextField7.requestFocus();
    }

    @SuppressWarnings("static-access")
    private void terminarVenta() {

//        this.jMenuItem3.setEnabled(true);
        this.jMenuItem4.setEnabled(true);
//        botonbarraVender1.setEnabled(true);
        this.botonbarraInventario.setEnabled(true);
        //this.botonbarraInventario1.setEnabled(true);

        this.botonbarraVender.setEnabled(true);
        this.jMenuItem1.setEnabled(true);
        this.jMenuItem2.setEnabled(true);
        this.jMenuItem6.setEnabled(true);

        this.ventanaIventas.setVisible(true);

        try {
            this.ventanaIventas.setMaximum(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.LimpiarJTable(tablaVenta);

        this.jMenuItem7.setEnabled(false);
        this.jTextField7.setText("");
        this.jTextField7.setEnabled(false);
        this.jButton7.setEnabled(false);

        jLabel2.setText("");
        this.jTextField5.setText("");
        this.jTextField6.setText("");
        //this.jTextField6.setText("");
        //  this.jLabel2.setText("Cambio:");

        vendiendo = false;
        articulos = 0;
    }

    private void cancelarVenta() {
        int opc = JOptionPane.showConfirmDialog(null, "Esta seguro que desea borrar los datos leidos de la venta?", "ISC Omar .:. Camcelar venta", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (opc == JOptionPane.YES_OPTION) {
            terminarVenta();
            activar = true;
        }
    }

    @SuppressWarnings("static-access")
    private void cobrar() {
        double abono = 0;
        if (sap.isSelected()) {
            //Cotización
            String cliente = JOptionPane.showInputDialog("¿A quien va dirigida la cotización?");
            Date fecha = new Date();

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

            for (int i = 0; i < tablaVenta.getRowCount(); i++) {

                procedimiento.insertarCotizacion(cliente, tablaVenta.getValueAt(i, 1).toString(), tablaVenta.getValueAt(i, 2).toString(),
                        tablaVenta.getValueAt(i, 3).toString(), tablaVenta.getValueAt(i, 4).toString(), sdf.format(fecha));

            }

            this.LimpiarJTable(tablaVenta);
            sap.setSelected(false);
            JasperReport jasperReport;
            JasperPrint jasperPrint;
            try {
                System.out.println("Imprimiendo cotiación");
                jasperReport = JasperCompileManager.compileReport("cotizacion_personal.jrxml");
                Map parametro1 = new HashMap();                
                parametro1.put("fecha", fecha);
                jasperPrint = JasperFillManager.fillReport(jasperReport, parametro1, conexion.con);
                JasperViewer jviewer=new JasperViewer(jasperPrint,false);
                jviewer.setTitle("Cotización");
                jviewer.setVisible(true);
            } catch (Exception ex) {
                ex.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        } else if (chkCot.isSelected()) {

            RegistrarApartado ra = new RegistrarApartado(this, true);
            ra.setLocationRelativeTo(this);
            ra.setTitle("Nuevo apartado");
            ra.setVisible(true);
            if (ra.echo) {
                String[][] datosProd = new String[tablaVenta.getRowCount()][tablaVenta.getColumnCount()];
                for (int i = 0; i < tablaVenta.getRowCount(); i++) {
                    for (int j = 0; j < tablaVenta.getColumnCount(); j++) {
                        datosProd[i][j] = tablaVenta.getValueAt(i, j).toString();

                    }
                }
                double total = Double.parseDouble(this.jTextField5.getText().substring(1));
                procedimiento.insertApartado(total, datosProd, ra.abono, ra.fechaLimite, ra.cliente);
                javax.swing.JOptionPane.showMessageDialog(null, "Prenda(s) apartada(s) con exito!!!");
                this.LimpiarJTable(tablaVenta);
                chkCot.setSelected(false);
            }
        } else if (articulos < 1) {
            JOptionPane.showMessageDialog(null, "No hay articulo agregados a la venta...", "ISC Omar. Cobrar!!", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                int opc = javax.swing.JOptionPane.showConfirmDialog(null, "El cliente pagará en efectivo?");
                if (opc == 0) {
                    activar = true;
                    double total = Double.parseDouble(this.jTextField5.getText().substring(1));
                    double pago = Double.parseDouble(JOptionPane.showInputDialog(null, "Cantidad con que paga el cliente", "" + total));
                    if (total > pago) {
                        JOptionPane.showMessageDialog(null, "La cantidad introducida no alcanza a cubrir el total del adeudo...\n Intenten de nuevo o cancele la venta.", "ISC Omar. Cobrar!!", JOptionPane.ERROR_MESSAGE);
                    } else {
                        for (int i = 0; i < tablaVenta.getRowCount(); i++) {
                            double c = Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
                            double p = Double.parseDouble(tablaVenta.getValueAt(i, 3).toString());
                            BigDecimal sub = new BigDecimal("" + c * p + "");
                            sub = sub.setScale(2, RoundingMode.HALF_UP);
                            tablaVenta.setValueAt("" + sub, i, 4);
                        }
                        double cambio = pago - total;
                        DecimalFormat df = new DecimalFormat();
                        df.setMinimumFractionDigits(2);
                        String camb = df.format(cambio);
                        BigDecimal ar = new BigDecimal(cambio + "");
                        ar = ar.setScale(2, RoundingMode.HALF_UP);
                        jTextField6.setText("Cambio: $" + ar);
                        Calendar cal = Calendar.getInstance();
                        String aux = "";
                        if (cal.get(Calendar.MONTH) < 10) {
                            aux = "0";
                        }
                        String aux2 = "";
                        if (cal.get(Calendar.DAY_OF_MONTH) < 10) {
                            aux2 = "0";
                        }
                        String fecha = cal.get(Calendar.YEAR) + "-" + aux + (cal.get(Calendar.MONTH) + 1) + "-" + aux2 + cal.get(Calendar.DAY_OF_MONTH);
                        String hora = cal.get(Calendar.HOUR_OF_DAY) + ":" + cal.get(Calendar.MINUTE) + ":" + cal.get(Calendar.SECOND);
                        String[][] dat = new String[tablaVenta.getRowCount() - 0][tablaVenta.getColumnCount() - 1];
                        for (int i = 0, m = 0; i < tablaVenta.getRowCount(); i++, m++) {
                            for (int j = 1, n = 0; j < tablaVenta.getColumnCount(); j++, n++) {
                                dat[m][n] = tablaVenta.getValueAt(i, j).toString();
                            }
                        }
                        String[][] datosProd = new String[tablaVenta.getRowCount()][tablaVenta.getColumnCount()];
                        for (int i = 0; i < tablaVenta.getRowCount(); i++) {
                            for (int j = 0; j < tablaVenta.getColumnCount(); j++) {
                                datosProd[i][j] = tablaVenta.getValueAt(i, j).toString();
                            }
                        }
                        System.out.println(datosProd.length);
                        if (procedimiento.insertInventa(fecha, total, hora, datosProd, usuario, pago)) {
                            JOptionPane.showMessageDialog(null, "Venta registrada con exito!!.\nGRACIAS POR SU COMPRA", "ISC Omar. Venta realizada", JOptionPane.INFORMATION_MESSAGE);
                            this.LimpiarJTable(tablaVenta);
                            this.jTextField7.setText("");
                            jLabel2.setText("");
                            this.jTextField5.setText("");
                            this.jTextField6.setText("");
                            //this.jTextField6.setText("");
                            //this.jLabel2.setText("Cambio:");
                            vendiendo = false;
                            articulos = 0;
                            String sum = df.format(suma);
                            Ticket ticket = new Ticket();
                            String[][] daT = new String[tablaVenta.getRowCount() - 0][tablaVenta.getColumnCount() - 1];
                            for (int i = 0, m = 0; i < tablaVenta.getRowCount(); i++, m++) {
                                for (int j = 1, n = 0; j < tablaVenta.getColumnCount(); j++, n++) {
                                    daT[m][n] = tablaVenta.getValueAt(i, j).toString();
                                    System.out.println(daT[m][n]);
                                }
                            }
                            ticket.setLista(dat);
                            ticket.setTotal("" + total);
                            ticket.setCambio(camb);
                            ticket.setPago("" + pago);
                            ticket.createTexto();
                            if (jCheckBox3.isSelected()) {
                                // Solo para antonio ocon.
                                Imprimir(fecha, hora, "$" + pago, "$" + ar);

                            }
                            jTextField7.requestFocus();
                            moyoreos.clear();
                        } else {
                            JOptionPane.showMessageDialog(null, "No se ha podido registrar la venta...\n Intenten de nuevo o cancele la venta.", "ISC Omar. Cobrar!!", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                } else if (opc == 1) {

                    Credito credito = new Credito(this, true);
                    credito.setVisible(true);
                    if (credito.getId() >= 0.0) {
                        activar = true;
                        double total = Double.parseDouble(this.jTextField5.getText().substring(1));
                        double pago = total;
                        abono = Double.parseDouble(JOptionPane.showInputDialog("¿Cantidad pendiente a pagar?", pago));
                        if (total > pago) {
                            JOptionPane.showMessageDialog(null, "La cantidad introducida no alcanza a cubrir el total del adeudo...\n Intenten de nuevo o cancele la venta.", "ISC Omar. Cobrar!!", JOptionPane.ERROR_MESSAGE);
                        } else {
                            for (int i = 0; i < tablaVenta.getRowCount(); i++) {
                                double c = Double.parseDouble(tablaVenta.getValueAt(i, 2).toString());
                                double p = Double.parseDouble(tablaVenta.getValueAt(i, 3).toString());
                                tablaVenta.setValueAt("" + c * p, i, 4);
                            }
                            double cambio = pago - total;
                            BigDecimal ar = new BigDecimal(cambio + "");
                            ar = ar.setScale(2, RoundingMode.HALF_UP);
                            DecimalFormat df = new DecimalFormat();
                            df.setMinimumFractionDigits(2);
                            String camb = "" + ar;
                            //              jLabel2.setText("Pagó con $" + (pago) + " Su cambio es:");
//                            jTextField6.setText("$ " + camb);
                            Calendar cal = Calendar.getInstance();
                            String aux = "";
                            if (cal.get(Calendar.MONTH) < 10) {
                                aux = "0";
                            }
                            String aux2 = "";
                            if (cal.get(Calendar.DAY_OF_MONTH) < 10) {
                                aux2 = "0";
                            }
                            String fecha = cal.get(Calendar.YEAR) + "-" + aux + (cal.get(Calendar.MONTH) + 1) + "-" + aux2 + cal.get(Calendar.DAY_OF_MONTH);
                            String hora = cal.get(Calendar.HOUR_OF_DAY) + ":" + cal.get(Calendar.MINUTE) + ":" + cal.get(Calendar.SECOND);
                            String[][] dat = new String[tablaVenta.getRowCount() - 0][tablaVenta.getColumnCount() - 1];
                            for (int i = 0, m = 0; i < tablaVenta.getRowCount(); i++, m++) {
                                for (int j = 1, n = 0; j < tablaVenta.getColumnCount(); j++, n++) {
                                    dat[m][n] = tablaVenta.getValueAt(i, j).toString();
                                }

                            }
                            String[][] datosProd = new String[tablaVenta.getRowCount()][tablaVenta.getColumnCount()];
                            for (int i = 0; i < tablaVenta.getRowCount(); i++) {
                                for (int j = 0; j < tablaVenta.getColumnCount(); j++) {
                                    datosProd[i][j] = tablaVenta.getValueAt(i, j).toString();

                                }
                            }
                            if (procedimiento.insertInventaCredito(fecha, total, hora, datosProd, usuario, "" + credito.getId(), pago, abono)) {
                                procedimiento.agregarCuenta("" + total, "COMPRA A CREDITO", usuario, "" + credito.getId());
                                JOptionPane.showMessageDialog(null, "Venta registrada con exito!!.\nGRACIAS POR SU COMPRA", "ISC Omar. Venta realizada", JOptionPane.INFORMATION_MESSAGE);
                                this.LimpiarJTable(tablaVenta);
                                this.jTextField7.setText("");
                                jLabel2.setText("");
                                this.jTextField5.setText("");
                                this.jTextField6.setText("");
                                vendiendo = false;
                                articulos = 0;
                                String sum = df.format(suma);
                                Ticket ticket = new Ticket();
                                String[][] daT = new String[tablaVenta.getRowCount() - 0][tablaVenta.getColumnCount() - 1];
                                for (int i = 0, m = 0; i < tablaVenta.getRowCount(); i++, m++) {
                                    for (int j = 1, n = 0; j < tablaVenta.getColumnCount(); j++, n++) {
                                        daT[m][n] = tablaVenta.getValueAt(i, j).toString();
                                        System.out.println(daT[m][n]);
                                    }
                                }
                                ticket.setLista(dat);
                                ticket.setTotal("" + total);
                                ticket.setCambio(camb);
                                ticket.setPago("" + pago);
                                ticket.createTexto();
                                if (jCheckBox2.isSelected()) {
                                    Imprimir(fecha, hora, "$" + pago, "$" + camb);

                                }
                                jTextField7.requestFocus();
                            } else {
                                JOptionPane.showMessageDialog(null, "No se ha podido registrar la venta...\n Intenten de nuevo o cancele la venta.", "ISC Omar. Cobrar!!", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                }
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Imposible realizar el calculo con los datos recien proporcionados...\n Intenten de nuevo o cancele la venta.", "ISC Omar. Cobrar!!", JOptionPane.ERROR_MESSAGE);
                //nfe.printStackTrace();
            }
            /*
             * for (int i = 0; i < listaNombres.getVisibleRowCount(); i++) {
             * listaNombres.remove(i); }
             */
        }
    }

    @SuppressWarnings("static-access")
    private void cobrar1() {
        double abono = 0;
        if (sa.isSelected()) {

            RegistrarApartado ra = new RegistrarApartado(this, true);
            ra.setLocationRelativeTo(this);
            ra.setTitle("Nuevo apartado");
            ra.setVisible(true);
            if (ra.echo) {
                String[][] datosProd = new String[tablaVenta1.getRowCount()][tablaVenta1.getColumnCount()];
                for (int i = 0; i < tablaVenta1.getRowCount(); i++) {
                    for (int j = 0; j < tablaVenta1.getColumnCount(); j++) {
                        datosProd[i][j] = tablaVenta1.getValueAt(i, j).toString();

                    }
                }
                double total = Double.parseDouble(this.jTextField8.getText().substring(1));
                procedimiento.insertApartado(total, datosProd, ra.abono, ra.fechaLimite, ra.cliente);
                javax.swing.JOptionPane.showMessageDialog(null, "Prenda(s) apartada(s) con exito!!!");
                this.LimpiarJTable(tablaVenta1);
                sa.setSelected(false);
            }
        } else if (articulos1 < 1) {
            JOptionPane.showMessageDialog(null, "No hay articulo agregados a la venta...", "ISC Omar. Cobrar!!", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                int opc = javax.swing.JOptionPane.showConfirmDialog(null, "El cliente pagará en efectivo?");
                if (opc == 0) {
                    activar = true;
                    double total = Double.parseDouble(this.jTextField8.getText().substring(1));
                    double pago = Double.parseDouble(JOptionPane.showInputDialog(null, "Cantidad con que paga el cliente", "" + total));
                    if (total > pago) {
                        JOptionPane.showMessageDialog(null, "La cantidad introducida no alcanza a cubrir el total del adeudo...\n Intenten de nuevo o cancele la venta.", "ISC Omar. Cobrar!!", JOptionPane.ERROR_MESSAGE);
                    } else {
                        for (int i = 0; i < tablaVenta1.getRowCount(); i++) {
                            double c = Double.parseDouble(tablaVenta1.getValueAt(i, 2).toString());
                            double p = Double.parseDouble(tablaVenta1.getValueAt(i, 3).toString());
                            BigDecimal sub = new BigDecimal("" + c * p + "");
                            sub = sub.setScale(2, RoundingMode.HALF_UP);
                            tablaVenta1.setValueAt("" + sub, i, 4);
                        }
                        double cambio = pago - total;
                        DecimalFormat df = new DecimalFormat();
                        df.setMinimumFractionDigits(2);
                        BigDecimal ar = new BigDecimal(cambio + "");
                        ar = ar.setScale(2, RoundingMode.HALF_UP);
                        String camb = ar + "";

                        jTextField9.setText("Cambio: $" + ar);
                        //                jLabel2.setText("Pagó con $" + (pago) + " Su cambio es:");
//                        jTextField6.setText("$ " + camb);
                        Calendar cal = Calendar.getInstance();
                        String aux = "";
                        if (cal.get(Calendar.MONTH) < 10) {
                            aux = "0";
                        }
                        String aux2 = "";
                        if (cal.get(Calendar.DAY_OF_MONTH) < 10) {
                            aux2 = "0";
                        }
                        String fecha = cal.get(Calendar.YEAR) + "-" + aux + (cal.get(Calendar.MONTH) + 1) + "-" + aux2 + cal.get(Calendar.DAY_OF_MONTH);
                        String hora = cal.get(Calendar.HOUR_OF_DAY) + ":" + cal.get(Calendar.MINUTE) + ":" + cal.get(Calendar.SECOND);
                        String[][] dat = new String[tablaVenta1.getRowCount() - 0][tablaVenta1.getColumnCount() - 1];
                        for (int i = 0, m = 0; i < tablaVenta1.getRowCount(); i++, m++) {
                            for (int j = 1, n = 0; j < tablaVenta1.getColumnCount(); j++, n++) {
                                dat[m][n] = tablaVenta1.getValueAt(i, j).toString();
                            }

                        }
                        String[][] datosProd = new String[tablaVenta1.getRowCount()][tablaVenta1.getColumnCount()];
                        for (int i = 0; i < tablaVenta1.getRowCount(); i++) {
                            for (int j = 0; j < tablaVenta1.getColumnCount(); j++) {
                                datosProd[i][j] = tablaVenta1.getValueAt(i, j).toString();

                            }
                        }
                        System.out.println(datosProd.length);
                        if (procedimiento.insertInventa(fecha, total, hora, datosProd, usuario, pago)) {

                            JOptionPane.showMessageDialog(null, "Venta registrada con exito!!.\nGRACIAS POR SU COMPRA", "ISC Omar. Venta realizada", JOptionPane.INFORMATION_MESSAGE);
                            this.LimpiarJTable(tablaVenta1);
                            this.jTextField10.setText("");
                            jLabel23.setText("");
                            this.jTextField8.setText("");
                            this.jTextField9.setText("");
                            //this.jTextField6.setText("");
                            //this.jLabel2.setText("Cambio:");
                            vendiendo = false;
                            articulos1 = 0;
                            String sum = df.format(suma);
                            Ticket ticket = new Ticket();
                            String[][] daT = new String[tablaVenta1.getRowCount() - 0][tablaVenta1.getColumnCount() - 1];
                            for (int i = 0, m = 0; i < tablaVenta1.getRowCount(); i++, m++) {
                                for (int j = 1, n = 0; j < tablaVenta1.getColumnCount(); j++, n++) {
                                    daT[m][n] = tablaVenta1.getValueAt(i, j).toString();
                                    System.out.println(daT[m][n]);
                                }
                            }
                            ticket.setLista(dat);
                            ticket.setTotal("" + total);
                            ticket.setCambio(camb);
                            ticket.setPago("" + pago);
                            ticket.createTexto();
                            if (jCheckBox2.isSelected()) {
                                Imprimir(fecha, hora, "$" + pago, "$" + ar);

                            }
                            jTextField10.requestFocus();
                            moyoreos1.clear();
                        } else {
                            JOptionPane.showMessageDialog(null, "No se ha podido registrar la venta...\n Intenten de nuevo o cancele la venta.", "ISC Omar. Cobrar!!", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                } else if (opc == 1) {

                    Credito credito = new Credito(this, true);
                    credito.setVisible(true);
                    if (credito.getId() >= 0.0) {
                        activar = true;
                        double total = Double.parseDouble(this.jTextField8.getText().substring(1));
                        double pago = total;
                        abono = Double.parseDouble(JOptionPane.showInputDialog("¿Cantidad pendiente a pagar?", pago));
                        if (total > pago) {
                            JOptionPane.showMessageDialog(null, "La cantidad introducida no alcanza a cubrir el total del adeudo...\n Intenten de nuevo o cancele la venta.", "ISC Omar. Cobrar!!", JOptionPane.ERROR_MESSAGE);
                        } else {

                            for (int i = 0; i < tablaVenta1.getRowCount(); i++) {
                                double c = Double.parseDouble(tablaVenta1.getValueAt(i, 2).toString());
                                double p = Double.parseDouble(tablaVenta1.getValueAt(i, 3).toString());
                                tablaVenta1.setValueAt("" + c * p, i, 4);
                            }

                            double cambio = pago - total;
                            DecimalFormat df = new DecimalFormat();
                            df.setMinimumFractionDigits(2);
                            BigDecimal ar = new BigDecimal(cambio + "");
                            ar = ar.setScale(2, RoundingMode.HALF_UP);
                            String camb = ar + "";
                            //              jLabel2.setText("Pagó con $" + (pago) + " Su cambio es:");
//                            jTextField6.setText("$ " + camb);
                            Calendar cal = Calendar.getInstance();
                            String aux = "";
                            if (cal.get(Calendar.MONTH) < 10) {
                                aux = "0";
                            }
                            String aux2 = "";
                            if (cal.get(Calendar.DAY_OF_MONTH) < 10) {
                                aux2 = "0";
                            }
                            String fecha = cal.get(Calendar.YEAR) + "-" + aux + (cal.get(Calendar.MONTH) + 1) + "-" + aux2 + cal.get(Calendar.DAY_OF_MONTH);
                            String hora = cal.get(Calendar.HOUR_OF_DAY) + ":" + cal.get(Calendar.MINUTE) + ":" + cal.get(Calendar.SECOND);
                            String[][] dat = new String[tablaVenta1.getRowCount() - 0][tablaVenta1.getColumnCount() - 1];
                            for (int i = 0, m = 0; i < tablaVenta1.getRowCount(); i++, m++) {
                                for (int j = 1, n = 0; j < tablaVenta1.getColumnCount(); j++, n++) {
                                    dat[m][n] = tablaVenta1.getValueAt(i, j).toString();
                                }

                            }
                            String[][] datosProd = new String[tablaVenta1.getRowCount()][tablaVenta1.getColumnCount()];
                            for (int i = 0; i < tablaVenta1.getRowCount(); i++) {
                                for (int j = 0; j < tablaVenta1.getColumnCount(); j++) {
                                    datosProd[i][j] = tablaVenta1.getValueAt(i, j).toString();

                                }
                            }
                            if (procedimiento.insertInventaCredito(fecha, total, hora, datosProd, usuario, "" + credito.getId(), pago, abono)) {
                                procedimiento.agregarCuenta("" + total, "COMPRA A CREDITO", usuario, "" + credito.getId());
                                JOptionPane.showMessageDialog(null, "Venta registrada con exito!!.\nGRACIAS POR SU COMPRA", "ISC Omar. Venta realizada", JOptionPane.INFORMATION_MESSAGE);
                                this.LimpiarJTable(tablaVenta1);
                                this.jTextField10.setText("");
                                jLabel23.setText("");
                                this.jTextField8.setText("");
                                this.jTextField9.setText("");
                                vendiendo = false;
                                articulos1 = 0;
                                String sum = df.format(suma);
                                Ticket ticket = new Ticket();
                                String[][] daT = new String[tablaVenta1.getRowCount() - 0][tablaVenta1.getColumnCount() - 1];
                                for (int i = 0, m = 0; i < tablaVenta1.getRowCount(); i++, m++) {
                                    for (int j = 1, n = 0; j < tablaVenta1.getColumnCount(); j++, n++) {
                                        daT[m][n] = tablaVenta1.getValueAt(i, j).toString();
                                        System.out.println(daT[m][n]);
                                    }
                                }
                                ticket.setLista(dat);
                                ticket.setTotal("" + total);
                                ticket.setCambio(camb);
                                ticket.setPago("" + pago);
                                ticket.createTexto();
                                if (jCheckBox2.isSelected()) {
                                    Imprimir(fecha, hora, "$" + pago, "$" + camb);

                                }
                                jTextField10.requestFocus();
                            } else {
                                JOptionPane.showMessageDialog(null, "No se ha podido registrar la venta...\n Intenten de nuevo o cancele la venta.", "ISC Omar. Cobrar!!", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                }
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Imposible realizar el calculo con los datos recien proporcionados...\n Intenten de nuevo o cancele la venta.", "ISC Omar. Cobrar!!", JOptionPane.ERROR_MESSAGE);
                //nfe.printStackTrace();
            }
            /*
             * for (int i = 0; i < listaNombres.getVisibleRowCount(); i++) {
             * listaNombres.remove(i); }
             */
        }
    }

    public void incluiEnListaTotal(String codBar) {
        String datos[] = procedimiento.getDetailsProducto(codBar);
        if (datos == null) {
            javax.swing.JOptionPane.showMessageDialog(null, "No se pudo extraer la informacion requerida para incluir en la venta.\n Si introdujo en codigo de barras manualmente, le sujerimos que revise que este sea correcto.", "ISC Omar. .>. Incluir en venta", javax.swing.JOptionPane.ERROR_MESSAGE);
        } else {
            String codigo = datos[0];
            String nombre = datos[1];
            String precioU = datos[2];
        }
    }

    public void LimpiarJTable(javax.swing.JTable t) {
        DefaultTableModel mode = (DefaultTableModel) t.getModel();
        int rango = mode.getRowCount() - 1;
        for (int i = rango; i >= 0; i--) {

            mode.removeRow(i);
        }
    }
    private int articulos = 0;
    private int articulos1 = 0;
    private double suma = 0;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JMenuItem botonbarraInventario;
    public javax.swing.JMenuItem botonbarraInventario2;
    public javax.swing.JMenuItem botonbarraInventario3;
    public javax.swing.JMenuItem botonbarraInventario4;
    public javax.swing.JMenuItem botonbarraTotal1;
    public javax.swing.JMenuItem botonbarraTotal2;
    public javax.swing.JMenuItem botonbarraTotal3;
    public javax.swing.JMenuItem botonbarraTotal4;
    public javax.swing.JMenuItem botonbarraTotal5;
    public javax.swing.JMenuItem botonbarraTotal6;
    public static javax.swing.JMenuItem botonbarraVender;
    private javax.swing.JCheckBox chkCot;
    private org.edisoncor.gui.varios.ClockDigital clockDigital1;
    private org.edisoncor.gui.varios.ClockDigital clockDigital2;
    private org.jdesktop.swingx.painter.GlossPainter glossPainter1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private static javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JLabel jLabel16;
    private static javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    public javax.swing.JMenu jMenu2;
    public javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private static javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private static javax.swing.JMenuItem jMenuItem2;
    public static javax.swing.JMenuItem jMenuItem3;
    private static javax.swing.JMenuItem jMenuItem4;
    private static javax.swing.JMenuItem jMenuItem5;
    private static javax.swing.JMenuItem jMenuItem6;
    private static javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JPopupMenu jPopupMenu3;
    private javax.swing.JPopupMenu jPopupMenu4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPopupMenu.Separator jSeparator10;
    private javax.swing.JPopupMenu.Separator jSeparator9;
    private javax.swing.JTabbedPane jTabbedPane2;
    public static javax.swing.JTextField jTextField10;
    private static javax.swing.JLabel jTextField5;
    private static javax.swing.JLabel jTextField6;
    public static javax.swing.JTextField jTextField7;
    private javax.swing.JLabel jTextField8;
    private javax.swing.JLabel jTextField9;
    private org.freixas.jwizard.JWizardDialog jWizardDialog1;
    private org.edisoncor.gui.panel.PanelTranslucido panelTranslucido1;
    private javax.swing.JPanel panelVenta;
    private javax.swing.JPanel panelVenta1;
    public javax.swing.JLayeredPane panelcapas;
    private javax.swing.JCheckBox sa;
    private javax.swing.JCheckBox sap;
    private javax.swing.JTable tablaVenta;
    private javax.swing.JTable tablaVenta1;
    public static javax.swing.JMenu user;
    public static javax.swing.JMenu user1;
    public static javax.swing.JInternalFrame ventanaIventas;
    // End of variables declaration//GEN-END:variables
    public static String usuario = "";
    private Conexion conexion = new Conexion();
    private puntoventa001.Procedimientos procedimiento = new puntoventa001.Procedimientos();
    private static Compras comp = new Compras();
    public Login login = new Login();
}
